✔	TODO const MatricialDomain{T,N} = AbstractArray{T,N} end @done (21-01-15 14:55)
✔ perhaps the domain should not be 20x3x3 but 3x3x20, because Julia is column-first @done (21-01-15 14:55)
✔	Calculate confusion matrix @done (21-01-22 20:09)
✔	Add > @done (21-01-23 01:19)
☐	Note that we need to know the speedup for using the peaks array. Hide computation of the peaks.
☐	Create a dataset with many but tiny worlds. Even a completely random one.
☐	Bring back the peaks, noting that this leads to constant propositional check.
☐	Improve the computation of the peaks leveraging the structure of IA Frames.
☐	Now move the peaks computation to the outer algorithm scope, so that it happens BEFORE the whole computation.
☐	Soften > and <= to be >alpha and <=alpha. Make alpha an array to iterate over. Find an efficient way to compute it (note that with a few elements in the world, it can be made efficient with integer operations).
☐	> doubles the time but doesn't seem to improve performances. Is this a bug? Try to come up with a dataset that shows if it works. If it's not a bug, maybe we should consider parametrizing on whether this is to be used or not.
☐	Fix naming style (e.g. variables, etc. Order of struct's members)
☐	Fix 3 pre-pruning stop conditions: a) purity>purity_threshold; b) min_sample_{leaf,split}>=threshold{absolute,relative}; c) purity gain < min_purity_gain. What if purity is just card(max_class)/card(all classes)?
☐	Why (best_purity / nt)? If ... maybe min_purity_increase needs to become min_info_gain
☐	Test adimensional case 1x1, & 2D case 3x3, 5x5, 7x7, with alfa=.8
☐	Add specific sampling on the image
✔	Try the two-dimensional case! @done (21-01-21 01:12)

☐	Add tree parser
☐	Add convenience methods for tree editing.
✔	Use view instead of slicing @done (21-01-18 20:47)
☐	Generalize World as a tuple of parameters ( https://stackoverflow.com/questions/40160120/generic-constructors-for-subtypes-of-an-abstract-type )
☐	use staticArrays for small domains (matrices/vectors) https://github.com/JuliaArrays/StaticArrays.jl
		X = OntologicalDataset(IntervalOntology,Array{SMatrix{3,3,Int},2}(undef, 20, 10))

☐	Add ProgressMeter?
☐	Generalize greedy step to greedy-n step.
☐	Generalize to beam-search and then beam-search-n?
☐	An ontology interpreted over an N-dimensional domain gives rise to a Kripke model/frame,
	but one can generalize for a Kripke model/frame in graph form.
		abstract type AbstractKripkeFrame end
		Generic Kripke frame: worlds & relations
		struct KripkeFrame{T} <: AbstractKripkeFrame{T}
☐	Extend to categorical variables



# Timings history


Testing dataset 'simpleDataset'
  195.146 ms (2866508 allocations: 216.25 MiB)
 Purity threshold 0.8
  acc.100.0%, kappa: 100.0%  Matrix: 2×2 Array{Int64,2}:
 28   0
  0  12
nodes: (3, heigh: 1) Purity threshold 1.0
  acc.100.0%, kappa: 100.0%  Matrix: 2×2 Array{Int64,2}:
 28   0
  0  12
nodes: (3, heigh: 1)Testing dataset 'simpleDataset2'
  2.827 ms (30430 allocations: 1.57 MiB)
 Purity threshold 0.8
  acc.30.0%, kappa: 0.0%  Matrix: 2×2 Array{Int64,2}:
 0  28
 0  12
nodes: (1, heigh: 0) Purity threshold 1.0
  acc.30.0%, kappa: 0.0%  Matrix: 2×2 Array{Int64,2}:
 0  28
 0  12
nodes: (1, heigh: 0)Testing dataset 'Eduard-5'
  12.766 s (80825464 allocations: 3.02 GiB)
 Purity threshold 0.8
  acc.85.56%, kappa: 84.52%  Matrix: 15×15 Array{Int64,2}:
 4  2  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  6  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  5  1  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 1  0  0  0  0  0  4  1  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  3  0  0  1  0  2  0  0
 0  0  0  0  1  0  0  0  5  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  6  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  5  0  1  0  0
 0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  1  0  5  0  0
 0  0  0  0  0  1  0  0  0  0  0  0  0  5  0
 0  0  1  0  0  0  0  0  0  0  0  0  0  0  5
nodes: (105, heigh: 8) Purity threshold 1.0
  acc.88.89%, kappa: 88.1%  Matrix: 15×15 Array{Int64,2}:
 4  2  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  6  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  5  1  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 1  0  0  0  0  0  4  1  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  4  0  0  1  0  1  0  0
 0  0  0  0  1  0  0  0  5  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  6  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  6  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  1  0  5  0  0
 1  0  0  0  0  0  0  0  0  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (129, heigh: 8)Testing dataset 'Eduard-10'
  36.787 s (303679147 allocations: 11.38 GiB)
 Purity threshold 0.8
  acc.85.56%, kappa: 84.52%  Matrix: 15×15 Array{Int64,2}:
 3  1  0  0  0  0  0  0  0  1  0  0  0  0  1
 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  5  0  0  1  0  0  0  0  0  0  0  0  0
 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  6  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  4  0  0  0  0  0  0  0  2
 0  0  0  1  0  0  0  5  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
 0  0  0  0  0  0  0  0  0  0  6  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  1  2  0  0  0  0  0  0  0  0  3  0
 0  0  0  0  0  0  0  1  1  0  0  0  0  0  4
nodes: (103, heigh: 9) Purity threshold 1.0
  acc.88.89%, kappa: 88.1%  Matrix: 15×15 Array{Int64,2}:
 4  1  0  0  0  0  0  0  0  1  0  0  0  0  0
 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  5  0  0  1  0  0  0  0  0  0  0  0  0
 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  6  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  4  0  0  0  0  0  0  0  2
 0  0  0  1  0  0  0  5  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
 0  0  0  0  0  0  0  0  0  0  6  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  1  0  0  0  0  0  1  0  0  0  4  0
 0  0  0  0  0  0  0  0  1  0  0  0  0  0  5
nodes: (125, heigh: 9)


add Confusion matrix, post-pruning, two-dimensional case and fix onlyUseRelationAll:
	Testing dataset 'simpleDataset'
	  357.024 ms (2865386 allocations: 216.17 MiB)
	 Purity threshold 0.7
	  Accuracy: 100% baby!
	  (nodes,height): (3,1)
	 Purity threshold 0.8
	  Accuracy: 100% baby!
	  (nodes,height): (3,1)
	 Purity threshold 0.9
	  Accuracy: 100% baby!
	  (nodes,height): (3,1)
	 Purity threshold 1.0
	  Accuracy: 100% baby!
	  (nodes,height): (3,1)
	Testing dataset 'simpleDataset2'
	  2.889 ms (26118 allocations: 1.37 MiB)
	 Purity threshold 0.7
	  Accuracy: 30.0%
	  Kappa: 0.0%
	  Matrix: 
	2×2 Array{Int64,2}:
	 0  28
	 0  12
	  (nodes,height): (1,0)
	 Purity threshold 0.8
	  Accuracy: 30.0%
	  Kappa: 0.0%
	  Matrix: 
	2×2 Array{Int64,2}:
	 0  28
	 0  12
	  (nodes,height): (1,0)
	 Purity threshold 0.9
	  Accuracy: 30.0%
	  Kappa: 0.0%
	  Matrix: 
	2×2 Array{Int64,2}:
	 0  28
	 0  12
	  (nodes,height): (1,0)
	 Purity threshold 1.0
	  Accuracy: 30.0%
	  Kappa: 0.0%
	  Matrix: 
	2×2 Array{Int64,2}:
	 0  28
	 0  12
	  (nodes,height): (1,0)
	Testing dataset 'Eduard-5'
	  6.710 s (43872595 allocations: 1.64 GiB)
	 Purity threshold 0.7
	  Accuracy: 87.78%
	  Kappa: 86.9%
	  Matrix: 
	15×15 Array{Int64,2}:
	 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  6  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  0  5  0  0  0  0  1  0  0  0  0  0
	 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
	 0  1  0  0  0  1  4  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  3  1  0  2  0  0  0  0
	 0  0  0  0  0  0  0  0  5  0  1  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  0  0  0  6  0  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  5  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  0  5  0  0
	 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0
	 0  0  0  0  0  0  0  1  0  0  0  0  0  0  5
	  (nodes,height): (137,10)
	 Purity threshold 0.8
	  Accuracy: 90.0%
	  Kappa: 89.29%
	  Matrix: 
	15×15 Array{Int64,2}:
	 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  6  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  0  6  0  0  0  0  0  0  0  0  0  0
	 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
	 0  1  0  0  0  1  4  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  4  1  0  1  0  0  0  0
	 0  0  0  0  0  0  0  1  5  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  0  0  0  6  0  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  5  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  0  5  0  0
	 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0
	 0  0  0  0  0  0  0  1  0  0  0  0  0  0  5
	  (nodes,height): (141,10)
	 Purity threshold 0.9
	  Accuracy: 91.11%
	  Kappa: 90.48%
	  Matrix: 
	15×15 Array{Int64,2}:
	 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  6  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  0  6  0  0  0  0  0  0  0  0  0  0
	 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
	 0  1  0  0  0  1  4  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  5  0  0  1  0  0  0  0
	 0  0  0  0  0  0  0  1  5  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  0  0  0  6  0  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  5  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  0  5  0  0
	 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0
	 0  0  0  0  0  0  0  1  0  0  0  0  0  0  5
	  (nodes,height): (151,10)
	 Purity threshold 1.0
	  Accuracy: 91.11%
	  Kappa: 90.48%
	  Matrix: 
	15×15 Array{Int64,2}:
	 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  6  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  0  6  0  0  0  0  0  0  0  0  0  0
	 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
	 0  1  0  0  0  1  4  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  5  0  0  1  0  0  0  0
	 0  0  0  0  0  0  0  1  5  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  0  0  0  6  0  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  5  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  0  5  0  0
	 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0
	 0  0  0  0  0  0  0  1  0  0  0  0  0  0  5
	  (nodes,height): (153,10)
	Testing dataset 'Eduard-10'
	  17.819 s (125273330 allocations: 4.73 GiB)
	 Purity threshold 0.7
	  Accuracy: 84.44%
	  Kappa: 83.33%
	  Matrix: 
	15×15 Array{Int64,2}:
	 5  1  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  1  0  4  0  0  1  0  0  0  0  0  0  0
	 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  4  0  0  0  0  2  0  0  0
	 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  1  0  0  5  0  0  0  0
	 0  0  0  0  0  0  0  0  0  1  0  5  0  0  0
	 0  0  0  0  0  0  0  0  0  0  1  0  5  0  0
	 0  0  0  0  0  2  0  0  0  0  0  0  0  4  0
	 0  0  0  0  0  0  0  0  0  1  0  0  0  0  5
	  (nodes,height): (185,10)
	 Purity threshold 0.8
	  Accuracy: 85.56%
	  Kappa: 84.52%
	  Matrix: 
	15×15 Array{Int64,2}:
	 5  1  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  1  0  4  0  0  1  0  0  0  0  0  0  0
	 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  4  0  0  0  0  2  0  0  0
	 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  1  0  0  5  0  0  0  0
	 0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
	 0  0  0  0  0  0  0  0  0  0  1  0  5  0  0
	 0  0  0  0  0  2  0  0  0  0  0  0  0  4  0
	 0  0  0  0  0  0  0  0  0  1  0  0  0  0  5
	  (nodes,height): (193,10)
	 Purity threshold 0.9
	  Accuracy: 84.44%
	  Kappa: 83.33%
	  Matrix: 
	15×15 Array{Int64,2}:
	 5  1  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  1  0  4  0  0  1  0  0  0  0  0  0  0
	 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  4  1  0  0  0  1  0  0  0
	 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  1  0  0  5  0  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  5  0  0  0
	 0  0  0  0  0  0  0  0  0  0  1  0  5  0  0
	 0  0  0  0  0  2  0  0  0  0  0  0  0  4  0
	 0  0  0  0  0  0  0  0  0  1  0  0  0  0  5
	  (nodes,height): (203,10)
	 Purity threshold 1.0
	  Accuracy: 84.44%
	  Kappa: 83.33%
	  Matrix: 
	15×15 Array{Int64,2}:
	 5  1  0  0  0  0  0  0  0  0  0  0  0  0  0
	 0  6  0  0  0  0  0  0  0  0  0  0  0  0  0
	 1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
	 0  0  0  6  0  0  0  0  0  0  0  0  0  0  0
	 0  0  1  0  4  0  0  1  0  0  0  0  0  0  0
	 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0
	 0  0  0  0  0  0  4  1  0  0  0  1  0  0  0
	 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0
	 0  0  0  0  0  0  0  0  0  5  0  1  0  0  0
	 0  0  0  0  0  0  0  1  0  0  5  0  0  0  0
	 0  0  0  0  0  0  0  1  0  0  0  5  0  0  0
	 0  0  0  0  0  0  0  0  0  0  1  0  5  0  0
	 0  0  0  0  0  2  0  0  0  0  0  0  0  4  0
	 0  0  0  0  0  0  0  0  0  1  0  0  0  0  5
	  (nodes,height): (203,10)

back to using Views:
Testing dataset 'simpleDataset'
  120.604 ms (2251653 allocations: 194.33 MiB)
  Accuracy: 100% baby!
  Nodes: 3
  Height: 1
Testing dataset 'simpleDataset2'
  851.795 μs (20017 allocations: 1.15 MiB)
  Accuracy: 30.0%
  Nodes: 1
  Height: 0
Testing dataset 'Eduard-5'
  4.502 s (39457913 allocations: 1.49 GiB)
  Accuracy: 88.89%
  Nodes: 167
  Height: 10
Testing dataset 'Eduard-10'
  11.129 s (102020927 allocations: 3.93 GiB)
  Accuracy: 84.44%
  Nodes: 221
  Height: 10

Without Xf(... best feature)
Testing dataset 'simpleDataset'
	146.995 ms (2251482 allocations: 194.09 MiB)
	Accuracy: 100% baby!
Testing dataset 'Eduard-5'
	6.307 s (39708278 allocations: 1.50 GiB)
	Accuracy: 91.11%
Testing dataset 'Eduard-10'
	12.520 s (102004178 allocations: 3.93 GiB)
	Accuracy: 84.44%

using Views with smarter Xf:
Testing dataset 'simpleDataset'
	150.841 ms (2251328 allocations: 194.08 MiB)
	Accuracy: 100% baby!
Testing dataset 'Eduard-5'
	4.617 s (39847067 allocations: 1.50 GiB)
	Accuracy: 90.0%
Testing dataset 'Eduard-10'
	12.352 s (102190347 allocations: 3.94 GiB)
	Accuracy: 84.44%

using Views:
Testing dataset 'simpleDataset'
	129.927 ms (2251644 allocations: 194.31 MiB)
	Accuracy: 100% baby!
Testing dataset 'Eduard-5'
	5.084 s (39690013 allocations: 1.50 GiB)
	Accuracy: 91.11%
Testing dataset 'Eduard-10'
	11.421 s (102032965 allocations: 3.94 GiB)
	Accuracy: 84.44%

not using Views:
Testing dataset 'simpleDataset'
	151.523 ms (2251644 allocations: 194.31 MiB)
	Accuracy: 100% baby!
Testing dataset 'Eduard-5'
	5.356 s (39781460 allocations: 1.50 GiB)
	Accuracy: 90.0%
Testing dataset 'Eduard-10'
	16.321 s (101172782 allocations: 3.90 GiB)
	Accuracy: 85.56%


# Timings history
# n_samp = 50, N = 3
# 484.136 μs (4368 allocations: 256.34 KiB)
# 517.471 μs (4368 allocations: 256.38 KiB)
# -- Swap dimensions to (X,Y,Z,...) x n_samples x n_variables --
# 210.019 μs (4205 allocations: 252.56 KiB)
# -- Add the use of Sf
# 214.959 μs (4210 allocations: 253.44 KiB)
# -- Remove the use of Sf
# n_samp = 100, N = 50
# 63.539 ms (1126468 allocations: 97.22 MiB)
# -- Add the use of Sf
# 63.749 ms (1126469 allocations: 97.22 MiB)
# n_samp = 200, N = 50
# 129.573 ms (2253001 allocations: 194.44 MiB)
# -- Remove the use of Sf
# 135.053 ms (2253000 allocations: 194.44 MiB)
# -- Add the use of Sf
# 133.009 ms (2253001 allocations: 194.44 MiB)
# -- Switched from WorldSet to WorldVector
# 131.344 ms (2251791 allocations: 194.32 MiB)
# Well, the difference is subtle
# 130.677 ms (2251632 allocations: 194.31 MiB)
# -- Actually, I've made a mistake (I was updating Sf[i] insfead of S[...])
# 131.131 ms (2251646 allocations: 194.31 MiB)
# -- Add two new datasets "Eduard-5" and "Eduard-10"
