Benchmarking dataset 'PaviaDataset'...
 n_samples = 216
, DecisionTree._startAtCenter()) Purity threshold 1.0
	acc: 68.52% kappa: 64.58% 9×9 Array{Int64,2}:
 4  0  0  0  0  0  2  0  0
 0  2  1  1  0  2  0  0  0
 0  1  2  0  0  0  0  3  0
 0  2  0  4  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  2  1  0  2  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 26
Tot nodes: 51
Height: 9
Modal height:  0
A103 >= 1649
✔ A7 >= 981
│✔ A1 >= 2140
││✔ 5 : 24/24
││✘ A72 >= 2184
││ ✔ 3 : 2/4
││ ✘ A101 >= 1686
││  ✔ A69 >= 1832
││  │✔ A32 >= 1725
││  ││✔ A36 >= 1903
││  │││✔ A72 >= 2039
││  ││││✔ 8 : 4/5
││  ││││✘ 3 : 4/4
││  │││✘ 8 : 9/9
││  ││✘ 3 : 7/7
││  │✘ 8 : 10/10
││  ✘ 3 : 6/6
│✘ A69 >= 912
│ ✔ A85 >= 2765
│ │✔ A10 >= 407
│ ││✔ 4 : 3/5
│ ││✘ 2 : 7/7
│ │✘ A5 >= 450
│ │ ✔ A5 >= 534
│ │ │✔ A4 >= 710
│ │ ││✔ A3 >= 810
│ │ │││✔ 2 : 2/4
│ │ │││✘ 6 : 6/6
│ │ ││✘ A30 >= 801
│ │ ││ ✔ A1 >= 924
│ │ ││ │✔ 6 : 4/5
│ │ ││ │✘ 2 : 3/4
│ │ ││ ✘ 2 : 4/4
│ │ │✘ 6 : 9/9
│ │ ✘ 2 : 5/5
│ ✘ 4 : 21/21
✘ A7 >= 568
 ✔ A91 >= 1352
 │✔ A85 >= 1565
 ││✔ A7 >= 1284
 │││✔ 7 : 2/4
 │││✘ 3 : 4/5
 ││✘ A19 >= 1308
 ││ ✔ 7 : 16/16
 ││ ✘ A102 >= 1459
 ││  ✔ 1 : 5/5
 ││  ✘ A1 >= 1045
 ││   ✔ 7 : 4/4
 ││   ✘ 7 : 2/4
 │✘ 1 : 15/15
 ✘ 9 : 24/24
, DecisionTree._startAtCenter())

julia> T = testDataset(datasets[2], false, args=args, kwargs=kwargs)                                                        
Benchmarking dataset 'PaviaDataset'...
 n_samples = 216
, DecisionTree._startAtCenter()) Purity threshold 1.0
	acc: 9.26% kappa: -2.08% 9×9 Array{Int64,2}:
 0  0  0  2  1  1  0  0  2
 1  0  0  0  0  0  1  1  3
 0  0  0  0  1  0  0  2  3
 0  1  1  1  0  1  0  0  2
 1  0  0  0  0  0  1  1  3
 1  1  0  1  0  0  0  0  3
 0  0  1  0  0  1  0  0  4
 2  0  1  0  0  0  0  1  2
 1  0  1  0  0  0  1  0  3
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 43
Tot nodes: 85
Height: 12
Modal height:  0
A2 >= 446
✔ A15 >= 346
│✔ A12 >= 652
││✔ A30 >= 551
│││✔ A192 >= 1011
││││✔ A95 >= 356
│││││✔ A269 >= 897
││││││✔ A7 >= 583
│││││││✔ A794 >= 2728
││││││││✔ A620 >= 1679
│││││││││✔ A676 >= 1938
││││││││││✔ 4 : 3/6
││││││││││✘ 7 : 3/4
│││││││││✘ 3 : 2/6
││││││││✘ A246 >= 1366
││││││││ ✔ A650 >= 1874
││││││││ │✔ A7 >= 1355
││││││││ ││✔ 5 : 2/4
│││││││ ││✘ 8 : 3/4
││││││││ │✘ 9 : 3/6
││││││││ ✘ A51 >= 947
││││││││  ✔ 7 : 4/4
││││││││  ✘ A8 >= 1198
││││││││   ✔ 3 : 3/7
││││││││   ✘ 8 : 3/5
│││││││✘ A52 >= 352
│││││││ ✔ A52 >= 413
│││││││ │✔ 1 : 3/4
│││││││ │✘ 2 : 3/5
│││││││ ✘ A5 >= 1225
│││││││  ✔ 9 : 2/4
│││││││  ✘ 4 : 2/4
││││││✘ A7 >= 691
││││││ ✔ A890 >= 2758
││││││ │✔ A35 >= 459
││││││ ││✔ 2 : 3/4
││││││ ││✘ 3 : 4/5
││││││ │✘ A74 >= 699
││││││ │ ✔ 1 : 3/4
││││││ │ ✘ 4 : 4/5
││││││ ✘ 1 : 3/4
│││││✘ A117 >= 1265
│││││ ✔ A277 >= 866
│││││ │✔ A26 >= 344
│││││ ││✔ A8 >= 681
│││││ │││✔ 8 : 5/6
│││││ │││✘ 7 : 2/5
│││││ ││✘ 4 : 2/4
│││││ │✘ 5 : 4/6
│││││ ✘ 3 : 3/7
││││✘ A39 >= 693
││││ ✔ A3 >= 854
││││ │✔ 2 : 4/5
││││ │✘ 6 : 3/4
││││ ✘ 1 : 3/4
│││✘ A681 >= 2067
│││ ✔ 7 : 3/7
│││ ✘ A9 >= 657
│││  ✔ 4 : 2/4
│││  ✘ 4 : 4/4
││✘ A57 >= 331
││ ✔ A57 >= 361
││ │✔ A236 >= 1579
││ ││✔ A33 >= 464
││ │││✔ 2 : 2/4
││ │││✘ 3 : 4/5
││ ││✘ A5 >= 1247
││ ││ ✔ 8 : 4/7
││ ││ ✘ A5 >= 973
││ ││  ✔ 7 : 4/5
││ ││  ✘ 5 : 4/6
││ │✘ A925 >= 1841
││ │ ✔ 8 : 3/5
││ │ ✘ 6 : 5/5
││ ✘ A12 >= 575
││  ✔ 5 : 4/4
││  ✘ A208 >= 1545
││   ✔ 1 : 3/6
││   ✘ 9 : 4/5
│✘ A41 >= 1199
│ ✔ 9 : 3/4
│ ✘ 1 : 5/7
✘ A41 >= 516
 ✔ 8 : 3/5
 ✘ 9 : 5/7
, DecisionTree._startAtCenter())

julia> T = testDataset(datasets[3], false, args=args, kwargs=kwargs)                                                        
Benchmarking dataset 'PaviaDataset'...
 n_samples = 216
, DecisionTree._startAtCenter()) Purity threshold 1.0
	acc: 75.93% kappa: 72.92% 9×9 Array{Int64,2}:
 4  1  1  0  0  0  0  0  0
 0  5  0  0  0  1  0  0  0
 0  0  4  0  0  0  0  2  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  5  0  1  0  0
 0  3  0  0  0  2  0  1  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  2  0  0  3  0
 0  0  0  0  0  0  0  0  6
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 18
Tot nodes: 35
Height: 7
Modal height:  7
<Bi,Id> (A92 >= 1637)
✔ <Oi,Ai> (A6 < 1053)
│✔ <O,L> (A58 >= 443)
││✔ <E,Li> (A5 >= 479)
│││✔ <Id,Bi> (A1 >= 848)
││││✔ 2 : 6/7
││││✘ <Ei,Bi> (A98 >= 2547)
││││ ✔ 2 : 3/4
││││ ✘ <Ei,L> (A1 < 728)
││││  ✔ 6 : 3/4
││││  ✘ 6 : 17/17
│││✘ 2 : 11/11
││✘ <Bi,Bi> (A76 >= 2576)
││ ✔ 4 : 3/6
││ ✘ 4 : 21/21
│✘ A30 >= 1945
│ ✔ A1 >= 2193
│ │✔ 5 : 22/22
│ │✘ 5 : 2/4
│ ✘ <E,Ai> (A28 >= 1731)
│  ✔ 8 : 15/15
│  ✘ <Id,Bi> (A2 < 1460)
│   ✔ A9 >= 1241
│   │✔ 8 : 7/7
│   │✘ A1 >= 763
│   │ ✔ 3 : 5/5
│   │ ✘ 3 : 2/4
│   ✘ 3 : 15/15
✘ <Id,Bi> (A2 < 876)
 ✔ 9 : 24/24
 ✘ <A,Di> (A18 >= 1226)
	✔ 7 : 23/23
	✘ <Bi,Ai> (A30 >= 1216)
	 ✔ 3 : 2/5
	 ✘ 1 : 22/22
, DecisionTree._startAtCenter())

Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = ()
 n_samples = 216
 Purity threshold 1.0
	acc: 72.22% kappa: 68.75% 9×9 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0
 0  4  0  0  0  2  0  0  0
 1  0  1  0  0  0  0  4  0
 1  1  0  4  0  0  0  0  0
 0  0  0  0  4  0  1  1  0
 0  3  0  0  0  3  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
Decision Tree
Leaves: 21
Tot nodes: 41
Height: 7
Modal height:  7
<> (A100 < 1518)
✔ <Ei,Bi> (A2 < 876)
│✔ A1 >= 328
││✔ A1 < 679
│││✔ 9 : 3/4
│││✘ 9 : 19/19
││✘ 9 : 2/2
│✘ <A,Ei> (A18 >= 1253)
│ ✔ <Id,O> (A1 >= 1153)
│ │✔ 7 : 5/6
│ │✘ 7 : 18/18
│ ✘ <Di,B> (A5 >= 1071)
│  ✔ 3 : 2/5
│  ✘ 1 : 21/21
✘ <> (A6 >= 1181)
 ✔ A98 >= 2451
 │✔ A1 >= 2109
 ││✔ 5 : 24/24
 ││✘ 6 : 5/6
 │✘ <L,B> (A13 < 1371)
 │ ✔ 3 : 15/15
 │ ✘ <Id,O> (A15 < 1447)
 │  ✔ <Ai,B> (A1 >= 1184)
 │  │✔ 8 : 6/7
 │  │✘ 3 : 6/6
 │  ✘ 8 : 18/18
 ✘ <> (A101 >= 3213)
	✔ <Oi,L> (A25 >= 505)
	│✔ 2 : 4/5
	│✘ 4 : 21/21
	✘ <> (A52 < 669)
	 ✔ 2 : 9/9
	 ✘ <> (A3 >= 827)
		✔ <Bi,Id> (A2 >= 659)
		│✔ <E,A> (A1 < 995)
		││✔ 2 : 2/4
		││✘ 6 : 4/4
		│✘ 2 : 8/8
		✘ <> (A1 < 337)
		 ✔ 6 : 3/4
		 ✘ 6 : 10/10


Benchmarking dataset 'IndianPinesCorrectedDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_NTPPi(), _Topo_EC(), _Topo_TPPi(), _Topo_PO(), _Topo_TPP(), _Topo_DC(), _Topo_NTPP()]))
 train size = (1, 1, 384, 200)
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 49
Tot nodes: 97
Height: 9
Modal height:  0
A149 >= 1177
✔ A183 >= 1156
│✔ A80 >= 1823
││✔ A154 >= 1405
│││✔ A44 >= 6298
││││✔ 4 : 3/4
││││✘ A23 >= 5163
││││ ✔ A2 >= 4635
││││ │✔ 12 : 2/4
││││ │✘ A81 >= 2438
││││ │ ✔ 2 : 9/9
││││ │ ✘ 2 : 2/4
││││ ✘ A88 >= 2714
││││  ✔ 2 : 3/4
││││  ✘ 11 : 4/5
│││✘ A107 >= 1133
│││ ✔ A103 >= 1110
│││ │✔ 2 : 2/4
│││ │✘ 4 : 6/6
│││ ✘ 5 : 2/4
││✘ A142 >= 1284
││ ✔ A183 >= 1204
││ │✔ A113 >= 1933
││ ││✔ A6 >= 5233
││ │││✔ A103 >= 1095
││ ││││✔ 10 : 6/7
││ ││││✘ 12 : 3/4
││ │││✘ A158 >= 1332
││ │││ ✔ A1 >= 2780
││ │││ │✔ 11 : 2/4
││ │││ │✘ 11 : 8/8
││ │││ ✘ 2 : 3/6
││ ││✘ A39 >= 5064
││ ││ ✔ A42 >= 5641
││ ││ │✔ 4 : 2/4
││ ││ │✘ 3 : 13/13
││ ││ ✘ A3 >= 4422
││ ││  ✔ 12 : 5/5
││ ││  ✘ 11 : 2/4
││ │✘ A89 >= 3185
││ │ ✔ 11 : 3/6
││ │ ✘ A6 >= 4865
││ │  ✔ 10 : 13/13
││ │  ✘ 11 : 2/4
││ ✘ A33 >= 3232
││  ✔ A151 >= 1088
││  │✔ 16 : 4/5
││  │✘ 12 : 8/8
││  ✘ A26 >= 3273
││   ✔ 4 : 4/6
││   ✘ 2 : 3/5
│✘ A78 >= 1642
│ ✔ A8 >= 4710
│ │✔ A4 >= 4120
│ ││✔ A77 >= 1852
│ │││✔ 8 : 18/18
│ │││✘ 7 : 2/4
│ ││✘ 1 : 3/4
│ │✘ A27 >= 2671
│ │ ✔ 1 : 19/19
│ │ ✘ 8 : 3/4
│ ✘ A59 >= 2425
│  ✔ A2 >= 4238
│  │✔ 7 : 3/4
│  │✘ 7 : 19/19
│  ✘ A1 >= 3674
│   ✔ 16 : 19/19
│   ✘ 4 : 5/6
✘ A27 >= 2581
 ✔ A37 >= 4879
 │✔ A186 >= 1087
 ││✔ A9 >= 4439
 │││✔ 9 : 20/20
 │││✘ 9 : 2/4
 ││✘ A94 >= 3038
 ││ ✔ A9 >= 4372
 ││ │✔ 5 : 3/4
 ││ │✘ 15 : 6/6
 ││ ✘ A34 >= 3608
 ││  ✔ A4 >= 4127
 ││  │✔ 6 : 2/4
 ││  │✘ 6 : 20/20
 ││  ✘ A33 >= 2965
 ││   ✔ 15 : 5/5
 ││   ✘ 9 : 2/4
 │✘ A3 >= 4106
 │ ✔ 13 : 3/4
 │ ✘ 13 : 21/21
 ✘ A27 >= 2406
	✔ A163 >= 1088
	│✔ A148 >= 1044
	││✔ 15 : 3/5
	││✘ 5 : 15/15
	│✘ 14 : 2/4
	✘ A15 >= 3680
	 ✔ 14 : 21/21
	 ✘ 15 : 3/4
, DecisionTree.ModalLogic.Interval2D, DecisionTree._startAtCenter()) test size = (1, 1, 96, 200)
 Purity threshold 1.0
	acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  1  2  0  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  0  0  0  0  1
 0  1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  4  0  0  0  1  0  0  0  0  1  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  2  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  4  0  0  0  0  0  1  0
 0  2  0  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  0  2  0  0  0  0  0  0  3  0  0  0  0  0
 0  1  0  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  0  0  2  0  0  1  0  0  0  0  1  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6

Decision Tree
Leaves: 76
Tot nodes: 151
Height: 11
Modal height:  5
<> (A176 >= 2955)
✔ A177 >= 2728
│✔ A184 >= 2935
││✔ A765 >= 2901
│││✔ A883 >= 2394
││││✔ A65 >= 4825
│││││✔ A1798 >= 1014
││││││✔ A793 >= 2619
│││││││✔ A3 >= 2758
││││││││✔ A1280 >= 1130
│││││││││✔ 11 : 5/5
│││││││││✘ 9 : 5/5
││││││││✘ 10 : 5/7
│││││││✘ 13 : 2/5
││││││✘ A714 >= 1834
││││││ ✔ A308 >= 5009
││││││ │✔ 7 : 2/4
││││││ │✘ A1 >= 2604
││││││ │ ✔ 8 : 4/4
││││││ │ ✘ 8 : 3/4
││││││ ✘ A379 >= 5886
││││││  ✔ A1 >= 3150
││││││  │✔ 11 : 5/5
││││││  │✘ 10 : 4/6
││││││  ✘ A944 >= 1064
││││││   ✔ 12 : 7/7
││││││   ✘ 11 : 4/5
│││││✘ A704 >= 1877
│││││ ✔ A895 >= 2254
│││││ │✔ A347 >= 5595
│││││ ││✔ A935 >= 1035
│││││ │││✔ A6 >= 2991
│││││ ││││✔ 8 : 4/4
│││││ ││││✘ 4 : 2/4
│││││ │││✘ A14 >= 3971
│││││ │││ ✔ 7 : 8/8
│││││ │││ ✘ 7 : 2/4
│││││ ││✘ 9 : 3/4
│││││ │✘ A27 >= 4492
│││││ │ ✔ 10 : 3/4
│││││ │ ✘ A680 >= 3016
│││││ │  ✔ 11 : 4/4
│││││ │  ✘ 9 : 3/4
│││││ ✘ A1298 >= 1017
│││││  ✔ A7 >= 2995
│││││  │✔ 12 : 3/4
│││││  │✘ 11 : 1/5
│││││  ✘ A290 >= 2877
│││││   ✔ A170 >= 3081
│││││   │✔ 5 : 4/4
│││││   │✘ 3 : 4/4
│││││   ✘ A670 >= 3206
│││││    ✔ 6 : 7/7
│││││    ✘ 9 : 2/4
││││✘ A795 >= 3283
││││ ✔ A18 >= 4121
││││ │✔ 13 : 3/5
││││ │✘ 7 : 2/5
││││ ✘ A817 >= 2701
││││  ✔ A732 >= 3022
││││  │✔ 14 : 3/5
││││  │✘ A7 >= 2765
││││  │ ✔ 9 : 4/6
││││  │ ✘ 12 : 4/5
││││  ✘ 5 : 2/7
│││✘ A556 >= 4039
│││ ✔ A849 >= 2731
│││ │✔ A789 >= 3046
│││ ││✔ A319 >= 4622
│││ │││✔ 10 : 2/4
│││ │││✘ 7 : 5/5
│││ ││✘ A825 >= 2593
│││ ││ ✔ A246 >= 3181
│││ ││ │✔ 9 : 5/5
│││ ││ │✘ 8 : 3/4
│││ ││ ✘ 12 : 3/4
│││ │✘ A922 >= 1086
│││ │ ✔ 16 : 1/4
│││ │ ✘ 13 : 4/4
│││ ✘ A638 >= 4679
│││  ✔ A1 >= 2771
│││  │✔ 2 : 3/6
│││  │✘ 5 : 3/6
│││  ✘ A809 >= 3082
│││   ✔ A909 >= 1723
│││   │✔ 16 : 4/7
│││   │✘ 15 : 3/5
│││   ✘ A712 >= 1811
│││    ✔ 3 : 2/4
│││    ✘ 14 : 4/4
││✘ A693 >= 1821
││ ✔ A1749 >= 1052
││ │✔ A39 >= 4582
││ ││✔ 1 : 3/7
││ ││✘ A57 >= 4882
││ ││ ✔ 2 : 4/4
││ ││ ✘ 5 : 4/4
││ │✘ A264 >= 2696
││ │ ✔ A21 >= 4320
││ │ │✔ 3 : 4/4
││ │ │✘ 6 : 3/4
││ │ ✘ 4 : 5/5
││ ✘ A1317 >= 1082
││  ✔ A317 >= 4524
││  │✔ 15 : 3/5
││  │✘ 2 : 2/5
││  ✘ A255 >= 3191
││   ✔ 14 : 5/5
││   ✘ 13 : 3/5
│✘ A998 >= 1332
│ ✔ A11 >= 4112
│ │✔ A545 >= 3095
│ ││✔ A281 >= 3231
│ │││✔ 3 : 6/7
│ │││✘ 2 : 4/5
│ ││✘ 15 : 3/5
│ │✘ A40 >= 4697
│ │ ✔ 4 : 4/4
│ │ ✘ 5 : 3/5
│ ✘ A887 >= 2703
│  ✔ A835 >= 3133
│  │✔ 13 : 3/5
│  │✘ 1 : 4/5
│  ✘ A118 >= 4955
│   ✔ 14 : 3/7
│   ✘ 16 : 6/7
✘ <> (A1607 >= 1104)
 ✔ A672 >= 3248
 │✔ 13 : 3/7
 │✘ A149 >= 3937
 │ ✔ A614 >= 4666
 │ │✔ 3 : 4/5
 │ │✘ 1 : 7/7
 │ ✘ 16 : 5/6
 ✘ <> (A505 >= 3863)
	✔ A460 >= 5846
	│✔ A6 >= 2770
	││✔ 6 : 2/4
	││✘ 2 : 4/4
	│✘ A705 >= 1814
	│ ✔ A725 >= 2062
	│ │✔ 4 : 6/7
	│ │✘ 5 : 3/4
	│ ✘ 1 : 3/5
	✘ <> (A1302 >= 1030)
	 ✔ A1 >= 3682
	 │✔ 14 : 4/4
	 │✘ 1 : 2/5
	 ✘ <> (A27 >= 4306)
		✔ 15 : 6/6
		✘ 6 : 2/6
 test size = (1, 1, 96, 1800)
 Purity threshold 1.0
	acc: 13.54% kappa: 7.78% 16×16 Array{Int64,2}:
 1  0  0  0  0  0  0  0  0  0  1  0  2  2  0  0
 1  0  1  0  0  0  1  0  0  0  0  0  0  1  0  2
 2  1  1  0  0  0  0  0  0  0  0  0  0  0  1  1
 1  0  0  1  0  0  0  0  0  1  0  0  2  1  0  0
 0  0  1  0  0  0  2  1  0  0  0  0  0  0  0  2
 1  1  2  0  1  0  0  0  0  1  0  0  0  0  0  0
 0  1  1  0  0  0  0  1  3  0  0  0  0  0  0  0
 1  1  0  0  0  0  0  1  2  0  0  1  0  0  0  0
 0  0  0  1  1  0  0  0  2  1  0  0  1  0  0  0
 0  0  0  0  0  0  0  1  1  2  1  1  0  0  0  0
 0  0  0  0  0  0  1  0  0  1  0  1  0  2  0  1
 0  0  0  0  0  1  1  0  1  2  0  1  0  0  0  0
 0  0  0  0  2  0  0  0  0  1  0  1  1  1  0  0
 0  0  1  0  0  0  1  0  0  0  0  1  1  1  1  0
 1  0  0  0  0  0  0  0  0  0  0  0  1  1  1  2
 1  0  1  0  0  0  0  0  0  0  0  0  1  1  1  1

 T = testDataset(datasets[6], false, args=args, kwargs=kwargs);     
Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = ()
 train size = (3, 3, 384, 200)
Decision Tree
Leaves: 37
Tot nodes: 73
Height: 8
Modal height:  8
<> (A195 >= 1073)
✔ <Ei,Id> (A2 < 4626)
│✔ <O,Bi> (A81 < 2411)
││✔ <Id,Bi> (A133 >= 1964)
│││✔ <Ai,E> (A76 >= 2775)
││││✔ <A,Ai> (A3 < 4492)
│││││✔ <Id,Di> (A79 >= 1853)
││││││✔ 2 : 3/5
││││││✘ 11 : 14/14
│││││✘ 2 : 4/7
││││✘ A1 < 3697
││││ ✔ 10 : 3/4
││││ ✘ 10 : 7/7
│││✘ <Ei,B> (A183 < 1203)
│││ ✔ <D,A> (A106 >= 1106)
│││ │✔ 2 : 3/5
│││ │✘ A1 >= 2602
│││ │ ✔ 10 : 7/7
│││ │ ✘ 10 : 2/3
│││ ✘ <E,Id> (A200 < 1015)
│││  ✔ <Ei,Id> (A146 >= 1041)
│││  │✔ 11 : 3/4
│││  │✘ A1 >= 2603
│││  │ ✔ 3 : 9/9
│││  │ ✘ 3 : 3/4
│││  ✘ <Ei,Id> (A91 >= 2568)
│││   ✔ <E,B> (A2 >= 4384)
│││   │✔ 3 : 3/4
│││   │✘ 12 : 12/12
│││   ✘ 11 : 3/4
││✘ <E,Bi> (A140 >= 1654)
││ ✔ <Li,E> (A83 < 3102)
││ │✔ <A,Id> (A36 < 5502)
││ ││✔ 2 : 12/12
││ ││✘ 4 : 5/5
││ │✘ A1 >= 2765
││ │ ✔ 3 : 2/4
││ │ ✘ 3 : 6/6
││ ✘ <E,A> (A21 >= 5260)
││  ✔ 12 : 8/8
││  ✘ A1 >= 2742
││   ✔ 4 : 12/12
││   ✘ 4 : 2/4
│✘ <L,Bi> (A1 < 3845)
│ ✔ <Ei,E> (A1 < 2607)
│ │✔ 9 : 2/5
│ │✘ 9 : 8/8
│ ✘ 16 : 24/24
✘ <> (A101 >= 1925)
 ✔ <E,B> (A7 < 4808)
 │✔ 1 : 24/24
 │✘ <Id,Ei> (A77 < 1819)
 │ ✔ 7 : 24/24
 │ ✘ 8 : 24/24
 ✘ <> (A26 >= 2812)
	✔ <Bi,Id> (A35 < 3705)
	│✔ <D,Ai> (A1 < 2720)
	││✔ 4 : 3/4
	││✘ 13 : 23/23
	│✘ <A,A> (A11 >= 4443)
	│ ✔ A1 < 2772
	│ │✔ 9 : 3/4
	│ │✘ 9 : 11/11
	│ ✘ <L,Ei> (A35 >= 3955)
	│  ✔ 6 : 23/23
	│  ✘ <B,A> (A1 >= 3191)
	│   ✔ 5 : 2/4
	│   ✘ 15 : 21/21
	✘ <> (A28 < 2347)
	 ✔ <A,Ai> (A2 >= 3880)
	 │✔ 14 : 22/22
	 │✘ 14 : 2/4
	 ✘ 5 : 19/19
 test size = (3, 3, 96, 200)
 Purity threshold 1.0
	acc: 66.67% kappa: 64.44% 16×16 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  3  2  1  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  3  1  0  0  0  0  0  0  1  1  0  0  0  0
 0  1  0  4  0  0  0  0  1  0  0  0  0  0  0  0
 0  0  0  0  5  0  0  0  1  0  0  0  0  0  0  0
 0  0  0  0  1  3  0  0  0  0  0  0  0  0  2  0
 0  0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  5  0  0  0  0  0  0  0
 0  2  0  1  0  0  0  0  0  2  1  0  0  0  0  0
 0  1  4  0  0  0  0  0  0  0  1  0  0  0  0  0
 0  1  0  0  0  0  0  0  0  0  1  4  0  0  0  0
 0  0  0  1  0  0  0  0  0  0  0  0  5  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  0  5  0  0
 0  0  0  0  2  0  0  0  1  0  0  0  0  2  1  0
 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  5

julia> kwargs = (                                                         
				 initCondition=DecisionTree.startAtCenter,                        
			 )                                                                  
(initCondition = DecisionTree._startAtCenter(),)

julia> T = testDataset(datasets[6], false, args=args, kwargs=kwargs);     
Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(),)
 train size = (3, 3, 384, 200)
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 37
Tot nodes: 73
Height: 8
Modal height:  8
<Bi,Di> (A158 < 1258)
✔ A101 < 1911
│✔ A136 >= 1472
││✔ <Ei,Id> (A4 < 4260)
│││✔ <D,D> (A89 >= 3034)
││││✔ 6 : 24/24
││││✘ 4 : 3/5
│││✘ <Oi,E> (A1 >= 2597)
│││ ✔ 9 : 23/23
│││ ✘ 5 : 2/4
││✘ <Ei,D> (A12 < 3746)
││ ✔ <D,Di> (A26 < 2548)
││ │✔ <Ei,E> (A1 < 3323)
││ ││✔ 14 : 20/20
││ ││✘ 14 : 3/4
││ │✘ A1 < 3179
││ │ ✔ 5 : 3/4
││ │ ✘ 5 : 17/17
││ ✘ <Ei,Id> (A1 >= 2714)
││  ✔ 13 : 24/24
││  ✘ 15 : 22/22
│✘ <Id,E> (A77 < 1824)
│ ✔ A1 >= 2767
│ │✔ 7 : 3/4
│ │✘ 7 : 21/21
│ ✘ A3 >= 4126
│  ✔ A1 < 3704
│  │✔ 8 : 21/21
│  │✘ 8 : 2/4
│  ✘ 1 : 22/22
✘ <Id,Di> (A2 < 4760)
 ✔ <Bi,Id> (A75 < 3617)
 │✔ <Ei,E> (A150 < 1264)
 ││✔ <D,Ai> (A194 < 1085)
 │││✔ A1 < 2601
 ││││✔ 4 : 5/6
 ││││✘ 10 : 4/5
 │││✘ <B,Ai> (A40 < 3184)
 │││ ✔ A1 < 2743
 │││ │✔ 12 : 3/5
 │││ │✘ 12 : 5/5
 │││ ✘ <Id,Ei> (A1 >= 2570)
 │││  ✔ 3 : 12/12
 │││  ✘ 11 : 3/4
 ││✘ <Ei,E> (A105 < 1084)
 ││ ✔ <B,Li> (A97 >= 3084)
 ││ │✔ <Bi,Id> (A3 >= 4412)
 ││ ││✔ 2 : 4/4
 ││ ││✘ 11 : 4/4
 ││ │✘ <Id,Li> (A1 >= 2579)
 ││ │ ✔ <D,L> (A1 >= 3706)
 ││ │ │✔ 11 : 2/4
 ││ │ │✘ 10 : 18/18
 ││ │ ✘ 2 : 2/4
 ││ ✘ <B,D> (A188 >= 1147)
 ││  ✔ A1 >= 3176
 ││  │✔ 2 : 2/4
 ││  │✘ 11 : 10/10
 ││  ✘ 12 : 3/5
 │✘ <A,Id> (A121 >= 2331)
 │ ✔ <Ei,E> (A1 < 3202)
 │ │✔ 2 : 2/4
 │ │✘ 2 : 10/10
 │ ✘ <Bi,E> (A2 >= 4263)
 │  ✔ <E,Ei> (A3 >= 4594)
 │  │✔ 12 : 11/11
 │  │✘ 3 : 2/4
 │  ✘ A77 < 1836
 │   ✔ 3 : 7/7
 │   ✘ A1 < 3697
 │    ✔ 4 : 11/11
 │    ✘ 4 : 3/4
 ✘ 16 : 24/24
, DecisionTree._startAtCenter()) test size = (3, 3, 96, 200)
 Purity threshold 1.0
	acc: 66.67% kappa: 64.44% 16×16 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  4  1  1  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  3  1  0  0  0  0  0  0  2  0  0  0  0  0
 0  1  2  2  1  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  5  0  0  1  0  0  0  0  0  0  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0  0
 0  0  0  1  1  0  0  0  4  0  0  0  0  0  0  0
 0  1  1  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  2  0  0  0  0  0  0  2  0  1  0  0  0  0
 0  2  0  0  0  0  0  0  0  0  1  3  0  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  5  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  0  4  1  0
 0  0  0  0  0  0  0  0  0  0  0  0  1  2  3  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
 

Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_NTPPi(), _Topo_EC(), _Topo_TPPi(), _Topo_PO(), _Topo_TPP(), _Topo_DC(), _Topo_NTPP()]))
 train size = (3, 3, 216, 103)
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 20
Tot nodes: 39
Height: 7
Modal height:  6
<PO> (A87 >= 1608)
✔ <TPPi> (A11 >= 914)
│✔ <EC> (A98 >= 2469)
││✔ A1 < 1434
│││✔ 6 : 5/5
│││✘ 5 : 24/24
││✘ <EC> (A18 >= 1602)
││ ✔ A2 < 1320
││ │✔ 8 : 14/14
││ │✘ 3 : 2/4
││ ✘ <TPP> (A2 < 845)
││  ✔ <EC> (A1 >= 1378)
││  │✔ 8 : 7/7
││  │✘ 3 : 3/4
││  ✘ 3 : 17/17
│✘ A80 < 2954
│ ✔ <PO> (A11 < 438)
│ │✔ 2 : 10/10
│ │✘ <EC> (A1 < 654)
│ │ ✔ <PO> (A88 >= 2149)
│ │ │✔ <TPPi> (A4 < 642)
│ │ ││✔ 2 : 4/5
│ │ ││✘ 6 : 5/5
│ │ │✘ 6 : 13/13
│ │ ✘ 2 : 6/6
│ ✘ <EC> (A68 < 616)
│  ✔ 4 : 21/21
│  ✘ 2 : 4/7
✘ <NTPPi> (A4 >= 433)
 ✔ A82 >= 1349
 │✔ A14 < 1318
 ││✔ 1 : 2/4
 ││✘ 7 : 21/21
 │✘ A98 >= 990
 │ ✔ A1 >= 925
 │ │✔ 1 : 3/4
 │ │✘ 1 : 17/17
 │ ✘ 7 : 2/4
 ✘ 9 : 24/24
, DecisionTree.ModalLogic.Interval2D, DecisionTree._startAtCenter()) test size = (3, 3, 54, 103)
 Purity threshold 1.0
	acc: 77.78% kappa: 75.0% 9×9 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0
 0  2  1  0  0  3  0  0  0
 0  0  5  0  0  0  1  0  0
 0  1  0  5  0  0  0  0  0
 1  0  1  0  4  0  0  0  0
 0  1  0  0  0  5  0  0  0
 2  0  0  0  0  0  4  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6

 Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_NTPPi(), _Topo_EC(), _Topo_TPPi(), _Topo_PO(), _Topo_TPP(), _Topo_DC(), _Topo_NTPP()]))
 train size = (3, 3, 384, 200)
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 37
Tot nodes: 73
Height: 9
Modal height:  7
<PO> (A160 < 1311)
✔ A13 >= 4128
│✔ A102 >= 1611
││✔ A7 >= 4808
│││✔ 8 : 22/22
│││✘ <EC> (A1 < 2594)
│││ ✔ 1 : 3/4
│││ ✘ 1 : 21/21
││✘ A1 >= 2587
││ ✔ 7 : 21/21
││ ✘ 7 : 3/4
│✘ <TPP> (A16 < 3963)
│ ✔ <DC> (A149 < 1040)
│ │✔ <DC> (A26 < 2505)
│ ││✔ A35 < 2635
│ │││✔ 14 : 2/4
│ │││✘ 14 : 22/22
│ ││✘ 5 : 19/19
│ │✘ <EC> (A96 >= 2917)
│ │ ✔ A1 >= 3169
│ │ │✔ 15 : 3/4
│ │ │✘ 15 : 17/17
│ │ ✘ 13 : 23/23
│ ✘ <EC> (A4 >= 4260)
│  ✔ <EC> (A1 < 2596)
│  │✔ 15 : 3/6
│  │✘ 9 : 24/24
│  ✘ <TPPi> (A89 < 3044)
│   ✔ 4 : 3/5
│   ✘ 6 : 24/24
✘ <PO> (A2 < 4768)
 ✔ <PO> (A79 >= 1935)
 │✔ <PO> (A150 < 1278)
 ││✔ <DC> (A2 < 4263)
 │││✔ 4 : 14/14
 │││✘ 12 : 4/4
 ││✘ <EC> (A143 < 1152)
 ││  <TPP> (A83 < 3090)
 ││ │✔ A1 < 2596
 ││ ││✔ 3 : 3/4
 ││ ││✘ 3 : 6/6
 ││ │✘ 2 : 2/4
 ││ ✘ <EC> (A1 < 2751)
 ││  ✔ 2 : 8/8
 ││  ✘ 2 : 3/4
 │✘ <TPPi> (A198 < 1050)
 │ ✔ <EC> (A31 < 2744)
 │ │✔ <EC> (A5 < 4401)
 │ ││✔ 4 : 5/5
 │ ││✘ 12 : 2/4
 │ │✘ <EC> (A75 < 2629)
 │ │ ✔ 2 : 5/5
 │ │ ✘ <TPPi> (A57 >= 3012)
 │ │  ✔ A1 < 3204
 │ │  │✔ 10 : 10/10
 │ │  │✘ 10 : 1/2
 │ │  ✘ 3 : 2/3
 │ ✘ A126 < 2249
 │  ✔ A6 >= 4982
 │  │✔ 3 : 10/10
 │  │✘ <TPP> (A50 >= 4746)
 │  │ ✔ 12 : 11/11
 │  │ ✘ 11 : 4/7
 │  ✘ A40 < 4081
 │   ✔ <PO> (A3 >= 4502)
 │   │✔ A197 < 1086
 │   ││✔ <EC> (A52 >= 5316)
 │   │││✔ 2 : 5/7
 │   │││✘ 10 : 9/9
 │   ││✘ 11 : 7/7
 │   │✘ 11 : 11/11
 │   ✘ 12 : 4/5
 ✘ 16 : 24/24
, DecisionTree.ModalLogic.Interval2D, DecisionTree._startAtCenter()) test size = (3, 3, 96, 200)
 Purity threshold 1.0
	acc: 73.96% kappa: 72.22% 16×16 Array{Int64,2}:
 5  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0
 0  3  0  1  0  0  0  0  0  1  0  1  0  0  0  0
 0  0  2  2  0  0  0  0  0  0  1  1  0  0  0  0
 0  0  0  5  0  0  0  0  0  0  1  0  0  0  0  0
 0  0  0  0  4  0  1  0  0  0  0  0  0  0  1  0
 0  0  0  0  0  5  0  0  0  0  0  0  0  0  1  0
 0  0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  5  0  0  0  0  0  0  0
 0  0  1  0  0  0  0  0  0  2  1  2  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  1  5  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  5  0  1  0
 0  0  0  0  1  0  0  0  0  0  0  0  0  5  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  1  5  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
T = testDataset(datasets[3], false, args=args, kwargs=kwargs);     
Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startWithRelationAll(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_NTPPi(), _Topo_EC(), _Topo_TPPi(), _Topo_PO(), _Topo_TPP(), _Topo_DC(), _Topo_NTPP()]))
 train size = (3, 3, 216, 103)
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 26
Tot nodes: 51
Height: 7
Modal height:  7
<> (A94 < 1656)
✔ <EC> (A4 < 433)
│✔ A1 >= 771
││✔ <EC> (A2 >= 546)
│││✔ A1 < 693
││││✔ 9 : 17/17
││││✘ 9 : 3/4
│││✘ 9 : 1/1
││✘ 9 : 3/3
│✘ <NTPP> (A15 >= 1228)
│ ✔ 7 : 19/19
│ ✘ <DC> (A40 < 1277)
│  ✔ <TPPi> (A1 >= 1337)
│  │✔ 1 : 3/4
│  │✘ 1 : 19/19
│  ✘ <DC> (A19 >= 1418)
│   ✔ 7 : 4/4
│   ✘ 3 : 4/6
✘ <> (A5 < 1021)
 ✔ <TPPi> (A81 >= 3092)
 │✔ <EC> (A68 < 616)
 ││✔ 4 : 20/20
 ││✘ 2 : 4/7
 │✘ <NTPPi> (A32 < 1486)
 │ ✔ A8 >= 392
 │ │✔ A4 < 905
 │ ││✔ <NTPP> (A1 >= 725)
 │ │││✔ 6 : 4/7
 │ │││✘ 6 : 11/11
 │ ││✘ 2 : 6/6
 │ │✘ 2 : 11/11
 │ ✘ <EC> (A71 >= 2109)
 │  ✔ 6 : 7/7
 │  ✘ 8 : 3/4
 ✘ <> (A98 >= 2451)
	✔ A1 >= 2470
	│✔ 5 : 22/22
	│✘ 5 : 2/4
	✘ <> (A14 >= 1544)
	 ✔ 8 : 10/10
	 ✘ <> (A4 >= 1409)
		✔ <EC> (A3 < 1221)
		│✔ 3 : 10/10
		│✘ 3 : 2/4
		✘ <> (A18 >= 1470)
		 ✔ A1 >= 1398
		 │✔ 8 : 4/4
		 │✘ 8 : 3/4
		 ✘ <> (A1 < 1060)
			✔ 3 : 4/5
			✘ 3 : 2/3
, DecisionTree.ModalLogic.Interval2D, DecisionTree._startWithRelationAll()) test size = (3, 3, 54, 103)
 Purity threshold 1.0
	acc: 77.78% kappa: 75.0% 9×9 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0
 0  4  0  0  0  2  0  0  0
 0  0  4  0  0  0  0  2  0
 1  1  0  4  0  0  0  0  0
 0  0  0  0  4  0  1  1  0
 0  2  0  0  1  3  0  0  0
 1  0  0  0  0  0  5  0  0
 0  0  0  0  0  0  0  6  0
 0  0  0  0  0  0  0  0  6

 Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startWithRelationAll(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_NTPPi(), _Topo_EC(), _Topo_TPPi(), _Topo_PO(), _Topo_TPP(), _Topo_DC(), _Topo_NTPP()]))
 train size = (3, 3, 384, 200)
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 43
Tot nodes: 85
Height: 8
Modal height:  6
<> (A183 >= 1173)
✔ <NTPPi> (A56 < 4479)
│✔ A3 < 4774
││✔ A41 < 5701
│││✔ <NTPP> (A149 >= 1314)
││││✔ <PO> (A128 >= 2222)
│││││✔ <EC> (A1 >= 3204)
││││││✔ 11 : 4/4
││││││✘ 2 : 3/4
│││││✘ <PO> (A5 < 4830)
│││││ ✔ <EC> (A11 >= 4983)
│││││ │✔ 11 : 5/5
│││││ │✘ 10 : 4/4
│││││ ✘ 10 : 12/12
││││✘ <NTPP> (A79 >= 1758)
││││ ✔ <NTPPi> (A6 >= 4959)
││││ │✔ 3 : 3/4
││││ │✘ <NTPPi> (A1 >= 2567)
││││ │ ✔ 12 : 3/4
││││ │ ✘ 12 : 7/7
││││ ✘ A199 < 1033
││││  ✔ 10 : 4/7
││││  ✘ 11 : 5/5
│││✘ <TPP> (A87 >= 3289)
│││ ✔ A50 >= 5373
│││ │✔ <DC> (A38 >= 6002)
│││ ││✔ 3 : 3/4
│││ ││✘ A1 >= 2771
│││ ││ ✔ 11 : 3/4
│││ ││ ✘ 11 : 6/6
│││ │✘ 2 : 4/4
│││ ✘ <NTPP> (A157 >= 1242)
│││  ✔ 3 : 14/14
│││  ✘ 4 : 3/6
││✘ A129 >= 2212
││ ✔ 2 : 6/6
││ ✘ <NTPP> (A127 >= 2285)
││  ✔ 2 : 2/5
││  ✘ 12 : 9/9
│✘ <DC> (A1 < 2589)
│ ✔ A1 >= 2577
│ │✔ <DC> (A1 >= 2833)
│ ││✔ 4 : 14/14
│ ││✘ 4 : 3/4
│ │✘ 5 : 2/5
│ ✘ <TPPi> (A86 < 3101)
│  ✔ <EC> (A2 >= 4773)
│  │✔ 16 : 6/6
│  │✘ 2 : 6/6
│  ✘ A1 < 2775
│   ✔ 9 : 3/4
│   ✘ 9 : 7/7
✘ <> (A101 >= 1907)
 ✔ A80 >= 1866
 │✔ <EC> (A3 < 4126)
 ││✔ 1 : 22/22
 ││✘ A1 >= 3694
 ││ ✔ 8 : 2/4
 ││ ✘ 8 : 21/21
 │✘ <PO> (A5 >= 4529)
 │ ✔ 7 : 22/22
 │ ✘ 7 : 2/4
 ✘ <> (A129 < 1698)
	✔ <NTPPi> (A21 < 3270)
	│✔ <TPP> (A26 < 2500)
	││✔ A15 >= 3760
	│││✔ 14 : 22/22
	│││✘ 14 : 2/4
	││✘ 5 : 19/19
	│✘ <NTPPi> (A1 >= 2716)
	│ ✔ 13 : 23/23
	│ ✘ <DC> (A1 >= 3178)
	│  ✔ 15 : 2/4
	│  ✘ 15 : 16/16
	✘ <> (A15 >= 4489)
	 ✔ A1 >= 3678
	 │✔ 16 : 18/18
	 │✘ <DC> (A2 >= 4115)
	 │ ✔ 9 : 12/12
	 │ ✘ 9 : 2/4
	 ✘ <> (A100 >= 2272)
		✔ 15 : 4/7
		✘ <> (A16 < 4028)
		 ✔ 6 : 3/5
		 ✘ 6 : 17/17
, DecisionTree.ModalLogic.Interval2D, DecisionTree._startWithRelationAll()) test size = (3, 3, 96, 200)
 Purity threshold 1.0
	acc: 69.79% kappa: 67.78% 16×16 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  0  2  1  0  0  0  0
 0  0  3  1  0  0  0  0  0  0  2  0  0  0  0  0
 0  0  1  4  0  0  0  0  1  0  0  0  0  0  0  0
 0  0  0  0  5  0  0  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  5  0  0  0  0  0  0  0  0  1  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  6  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0  0
 0  0  0  1  0  0  0  0  0  5  0  0  0  0  0  0
 0  1  1  2  0  0  0  0  0  1  1  0  0  0  0  0
 0  0  2  0  0  0  0  0  0  0  0  4  0  0  0  0
 0  1  0  0  1  0  0  0  0  0  0  0  4  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  0  5  0  0
 0  0  0  0  2  0  0  0  1  0  0  0  0  2  1  0
 0  0  0  0  2  0  0  0  0  0  0  0  0  0  0  4

Benchmarking dataset 'PaviaDataset, 5x5'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_NTPPi(), _Topo_EC(), _Topo_TPPi(), _Topo_PO(), _Topo_TPP(), _Topo_DC(), _Topo_NTPP()]))
 train size = (5, 5, 216, 103)
^[[200~T = testDataset(datasets[8], false, args=args, kwargs=kwargs);^[[201~
DecisionTree.DTree{Int64,Int64}(Decision Tree
Leaves: 19
Tot nodes: 37
Height: 7
Modal height:  6
<TPPi> (A103 >= 1676)
✔ A5 >= 1062
│✔ <PO> (A101 >= 2552)
││✔ A1 >= 2398
│││✔ 5 : 24/24
│││✘ 6 : 4/4
││✘ <TPPi> (A22 >= 1606)
││ ✔ <NTPPi> (A1 >= 815)
││ │✔ 8 : 15/15
││ │✘ 8 : 3/4
││ ✘ <TPP> (A1 >= 1528)
││  ✔ 3 : 18/18
││  ✘ 8 : 6/7
│✘ <EC> (A39 < 401)
│ ✔ 4 : 23/23
│ ✘ <EC> (A62 < 616)
│  ✔ A1 >= 1033
│  │✔ 2 : 3/4
│  │✘ 2 : 13/13
│  ✘ <EC> (A2 < 452)
│   ✔ <NTPPi> (A2 >= 281)
│   │✔ <EC> (A1 < 380)
│   ││✔ 6 : 3/4
│   ││✘ 6 : 12/12
│   │✘ 6 : 4/6
│   ✘ 2 : 5/6
✘ <NTPPi> (A3 >= 493)
 ✔ <NTPP> (A19 < 1241)
 │✔ <NTPP> (A5 >= 1006)
 ││✔ 3 : 3/4
 ││✘ <EC> (A62 >= 2017)
 ││ ✔ 7 : 2/4
 ││ ✘ 1 : 21/21
 │✘ A1 < 1320
 │ ✔ 7 : 5/6
 │ ✘ 7 : 17/17
 ✘ 9 : 24/24
, DecisionTree.ModalLogic.Interval2D, DecisionTree._startAtCenter()) test size = (5, 5, 54, 103)
 Purity threshold 1.0
  acc: 70.37% kappa: 66.67% 9×9 Array{Int64,2}:
 3  1  1  0  0  0  1  0  0
 0  4  0  0  0  2  0  0  0
 1  0  2  0  0  0  1  2  0
 0  0  0  5  0  1  0  0  0
 0  0  0  0  4  1  0  1  0
 0  1  0  0  0  5  0  0  0
 2  0  0  0  0  0  4  0  0
 0  1  0  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6




julia> T = testDataset(datasets[1], timeit, args=args, kwargs=kwargs);    
Benchmarking dataset 'PaviaDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_DC(), _Topo_TPP(), _Topo_NTPPi(), _Topo_NTPP(), _Topo_PO(), _Topo_EC(), _Topo_TPPi()]))
 train size = (1, 1, 216, 103)
  12.657 s (106820851 allocations: 5.97 GiB)
 test size = (1, 1, 54, 103)
 Purity threshold 1.0
  acc: 68.52% kappa: 64.58% 9×9 Array{Int64,2}:
 4  0  0  0  0  0  2  0  0
 0  2  1  1  0  2  0  0  0
 0  1  2  0  0  0  0  3  0
 0  2  0  4  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  2  1  0  2  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
ERROR: MethodError: no method matching num_nodes(::DecisionTree.DTree{Int64,Int64})
Closest candidates are:
  num_nodes(::DTLeaf) at /home/gio/Desktop/SpatialDecisionTree/DecisionTree.jl/src/DecisionTree.jl:100
  num_nodes(::DTInternal) at /home/gio/Desktop/SpatialDecisionTree/DecisionTree.jl/src/DecisionTree.jl:101
Stacktrace:
 [1] #testDataset#41(::Array{Any,1}, ::NamedTuple{(:max_depth, :min_samples_leaf, :min_samples_split),Tuple{Int64,Int64,Int64}}, ::NamedTuple{(:initCondition, :ontology),Tuple{DecisionTree._startAtCenter,Ontology}}, ::Function, ::Tuple{String,Tuple{Array{Int64,4},Array{Int64,1},Array{Int64,4},Array{Int64,1}}}, ::Bool) at ./REPL[112]:40
 [2] (::getfield(Main, Symbol("#kw##testDataset")))(::NamedTuple{(:args, :kwargs),Tuple{NamedTuple{(:max_depth, :min_samples_leaf, :min_samples_split),Tuple{Int64,Int64,Int64}},NamedTuple{(:initCondition, :ontology),Tuple{DecisionTree._startAtCenter,Ontology}}}}, ::typeof(testDataset), ::Tuple{String,Tuple{Array{Int64,4},Array{Int64,1},Array{Int64,4},Array{Int64,1}}}, ::Bool) at ./none:0
 [3] top-level scope at none:0
 [4] eval(::Module, ::Any) at ./boot.jl:319
 [5] eval_user_input(::Any, ::REPL.REPLBackend) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.0/REPL/src/REPL.jl:85
 [6] run_backend(::REPL.REPLBackend) at /home/gio/.julia/packages/Revise/moD4B/src/packagedef.jl:1221
 [7] top-level scope at none:0

julia> T = testDataset(datasets[3], timeit, args=args, kwargs=kwargs);    
Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_DC(), _Topo_TPP(), _Topo_NTPPi(), _Topo_NTPP(), _Topo_PO(), _Topo_EC(), _Topo_TPPi()]))
 train size = (3, 3, 216, 103)
  93.568 s (660898119 allocations: 36.12 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 75.93% kappa: 72.92% 9×9 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0
 0  2  1  0  0  3  0  0  0
 0  0  4  0  0  0  1  1  0
 0  1  0  5  0  0  0  0  0
 1  0  1  0  4  0  0  0  0
 0  1  0  0  0  5  0  0  0
 2  0  0  0  0  0  4  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
ERROR: MethodError: no method matching num_nodes(::DecisionTree.DTree{Int64,Int64})
Closest candidates are:
  num_nodes(::DTLeaf) at /home/gio/Desktop/SpatialDecisionTree/DecisionTree.jl/src/DecisionTree.jl:100
  num_nodes(::DTInternal) at /home/gio/Desktop/SpatialDecisionTree/DecisionTree.jl/src/DecisionTree.jl:101
Stacktrace:
 [1] #testDataset#41(::Array{Any,1}, ::NamedTuple{(:max_depth, :min_samples_leaf, :min_samples_split),Tuple{Int64,Int64,Int64}}, ::NamedTuple{(:initCondition, :ontology),Tuple{DecisionTree._startAtCenter,Ontology}}, ::Function, ::Tuple{String,Tuple{Array{Int64,4},Array{Int64,1},Array{Int64,4},Array{Int64,1}}}, ::Bool) at ./REPL[112]:40
 [2] (::getfield(Main, Symbol("#kw##testDataset")))(::NamedTuple{(:args, :kwargs),Tuple{NamedTuple{(:max_depth, :min_samples_leaf, :min_samples_split),Tuple{Int64,Int64,Int64}},NamedTuple{(:initCondition, :ontology),Tuple{DecisionTree._startAtCenter,Ontology}}}}, ::typeof(testDataset), ::Tuple{String,Tuple{Array{Int64,4},Array{Int64,1},Array{Int64,4},Array{Int64,1}}}, ::Bool) at ./none:0
 [3] top-level scope at none:0
 [4] eval(::Module, ::Any) at ./boot.jl:319
 [5] eval_user_input(::Any, ::REPL.REPLBackend) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.0/REPL/src/REPL.jl:85
 [6] run_backend(::REPL.REPLBackend) at /home/gio/.julia/packages/Revise/moD4B/src/packagedef.jl:1221
 [7] top-level scope at none:0

julia> T = testDataset(datasets[4], timeit, args=args, kwargs=kwargs);    
Benchmarking dataset 'IndianPinesCorrectedDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_DC(), _Topo_TPP(), _Topo_NTPPi(), _Topo_NTPP(), _Topo_PO(), _Topo_EC(), _Topo_TPPi()]))
 train size = (1, 1, 384, 200)
  54.023 s (438191131 allocations: 24.45 GiB)
 test size = (1, 1, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  1  2  0  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  0  0  0  0  1
 0  1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  4  0  0  0  1  0  0  0  0  1  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  2  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  4  0  0  0  0  0  1  0
 0  2  0  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  0  2  0  0  0  0  0  0  3  0  0  0  0  0
 0  1  0  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  0  0  2  0  0  1  0  0  0  0  1  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
ERROR: MethodError: no method matching num_nodes(::DecisionTree.DTree{Int64,Int64})
Closest candidates are:
  num_nodes(::DTLeaf) at /home/gio/Desktop/SpatialDecisionTree/DecisionTree.jl/src/DecisionTree.jl:100
  num_nodes(::DTInternal) at /home/gio/Desktop/SpatialDecisionTree/DecisionTree.jl/src/DecisionTree.jl:101
Stacktrace:
 [1] #testDataset#41(::Array{Any,1}, ::NamedTuple{(:max_depth, :min_samples_leaf, :min_samples_split),Tuple{Int64,Int64,Int64}}, ::NamedTuple{(:initCondition, :ontology),Tuple{DecisionTree._startAtCenter,Ontology}}, ::Function, ::Tuple{String,Tuple{Array{Int64,4},Array{Int64,1},Array{Int64,4},Array{Int64,1}}}, ::Bool) at ./REPL[112]:40
 [2] (::getfield(Main, Symbol("#kw##testDataset")))(::NamedTuple{(:args, :kwargs),Tuple{NamedTuple{(:max_depth, :min_samples_leaf, :min_samples_split),Tuple{Int64,Int64,Int64}},NamedTuple{(:initCondition, :ontology),Tuple{DecisionTree._startAtCenter,Ontology}}}}, ::typeof(testDataset), ::Tuple{String,Tuple{Array{Int64,4},Array{Int64,1},Array{Int64,4},Array{Int64,1}}}, ::Bool) at ./none:0
 [3] top-level scope at none:0
 [4] eval(::Module, ::Any) at ./boot.jl:319
 [5] eval_user_input(::Any, ::REPL.REPLBackend) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.0/REPL/src/REPL.jl:85
 [6] run_backend(::REPL.REPLBackend) at /home/gio/.julia/packages/Revise/moD4B/src/packagedef.jl:1221
 [7] top-level scope at none:0

julia> T = testDataset(datasets[6], timeit, args=args, kwargs=kwargs);    
Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_DC(), _Topo_TPP(), _Topo_NTPPi(), _Topo_NTPP(), _Topo_PO(), _Topo_EC(), _Topo_TPPi()]))
 train size = (3, 3, 384, 200)








^[[200~datasets = Tuple{String,Tuple{Array,Array,Array,Array}}[
  # ("simpleDataset",traintestsplit(simpleDataset(200,n_variables = 50,rng = my_rng())...,0.8)),
  # ("simpleDataset2",traintestsplit(simpleDataset2(200,n_variables = 5,rng = my_rng())...,0.8)),
  # ("Eduard-5",EduardDataset(5)),
  # ("Eduard-10",EduardDataset(10)),
  ("PaviaDataset, 1x1",traintestsplit(SampleLandCoverDataset(9*30, 1, "Pavia", rng = my_rng())...,0.8)),
  ("PaviaDataset, 3x3 flattened",traintestsplit(SampleLandCoverDataset(9*30, 3, "Pavia", flattened = true, rng = my_rng())...,0.8)),
  ("PaviaDataset, 3x3",traintestsplit(SampleLandCoverDataset(9*30, 3, "Pavia", rng = my_rng())...,0.8)),
  ("IndianPinesCorrectedDataset, 1x1",traintestsplit(SampleLandCoverDataset(16*30, 1, "IndianPinesCorrected", rng = my_rng())...,0.8)),
  ("IndianPinesCorrectedDataset, 3x3 flattened",traintestsplit(SampleLandCoverDataset(16*30, 3, flattened = true, "IndianPinesCorrected", rng = my_rng())...,0.8)),
  ("IndianPinesCorrectedDataset, 3x3",traintestsplit(SampleLandCoverDataset(16*30, 3, "IndianPinesCorrected", rng = my_rng())...,0.8)),
  ("PaviaDataset, 5x5",traintestsplit(SampleLandCoverDataset(9*30, 5, "Pavia", rng = my_rng())...,0.8)),
  ("IndianPinesCorrectedDataset, 5x5",traintestsplit(SampleLandCoverDataset(16*30, 5, "IndianPinesCorrected", rng = my_rng())...,0.8)),
  # ("PaviaDataset, 4x4",traintestsplit(SampleLandCoverDataset(9*30, 4, "Pavia", rng = my_rng())...,0.8)),
  # ("IndianPinesCorrectedDataset, 4x4",traintestsplit(SampleLandCoverDataset(16*30, 4, "IndianPinesCorrected", rng = my_rng())...,0.8)),
];^[[201~

julia> using DecisionTree.ModalLogic                                  

julia> import Random                                                  

julia> my_rng() = Random.MersenneTwister(1) # Random.GLOBAL_RNG       
my_rng (generic function with 1 method)

julia> using Logging                                                  

julia> using BenchmarkTools                                           
^[[200~args = (
  max_depth=-1,
  min_samples_leaf=4,
  min_samples_split=8,
  # min_purity_increase=0.02,
  # max_purity_split=1.0, # TODO there's something wrong here, I think this sets min_purity_increase.
)^[[201~

julia> using ScikitLearnBase                                          

julia> using Statistics                                               

julia> using Test                                                     

julia> using Profile                                                  

julia> using PProf                                                    

julia> include("example-datasets.jl")                                 
traintestsplit (generic function with 2 methods)

julia> function testDataset((name,dataset), timeit::Bool = true; post_pruning_purity_thresholds = [], args = (), kwargs = ())
         println("Benchmarking dataset '$name'...")
         global_logger(ConsoleLogger(stderr, Logging.Warn));
         length(dataset) == 4 || error(length(dataset))
         X_train, Y_train, X_test, Y_test = dataset
         
         println("args = ", args)
         println("kwargs = ", kwargs)

         # println(" n_samples = $(size(X_train)[end-1])")
         println(" train size = $(size(X_train))")
         if timeit
julia> function testDataset((name,dataset), timeit::Bool = true; post_pruning_purity_thresholds = [], args = (), kwargs = ())               
         println("Benchmarking dataset '$name'...")                   
         global_logger(ConsoleLogger(stderr, Logging.Warn));          
         length(dataset) == 4 || error(length(dataset))               
         X_train, Y_train, X_test, Y_test = dataset                   
                                                                      
         println("args = ", args)                                     
         println("kwargs = ", kwargs)                                 
                                                                      
         # println(" n_samples = $(size(X_train)[end-1])")            
         println(" train size = $(size(X_train))")                    
         if timeit                                                    
           @btime build_tree($Y_train, $X_train, args...; kwargs..., rng = my_rng());                                                       
         end                                                          
                                                                      
         # global_logger(ConsoleLogger(stderr, Logging.Info))         
         T = build_tree(Y_train, X_train, args...; kwargs..., rng = my_rng());                                                              
                                                                      
         if !timeit                                                   
           print(T)                                                   
         end                                                          
                                                                      
         println(" test size = $(size(X_test))")                      
         for pruning_purity_threshold in sort(unique([(Float64.(post_pruning_purity_thresholds))...,1.0]))                                  
           println(" Purity threshold $pruning_purity_threshold")     
                                                                      
           global_logger(ConsoleLogger(stderr, Logging.Warn));        
                                                                      
           T_pruned = prune_tree(T, pruning_purity_threshold)         
           preds = apply_tree(T_pruned, X_test);                      
           cm = confusion_matrix(Y_test, preds)                       
           # @test cm.accuracy > 0.99                                 
                                                                      
           print("  acc: ", round(cm.accuracy*100, digits=2), "% kappa: ", round(cm.kappa*100, digits=2), "% ")
           display(cm.matrix)

           global_logger(ConsoleLogger(stderr, Logging.Info));

           if timeit
             println("nodes: ($(num_nodes(T_pruned)), height: $(height(T_pruned)))")
           end
         end
         return T;
       end
testDataset (generic function with 2 methods)

julia> datasets = Tuple{String,Tuple{Array,Array,Array,Array}}[       
         # ("simpleDataset",traintestsplit(simpleDataset(200,n_variables = 50,rng = my_rng())...,0.8)),                                     
         # ("simpleDataset2",traintestsplit(simpleDataset2(200,n_variables = 5,rng = my_rng())...,0.8)),                                    
         # ("Eduard-5",EduardDataset(5)),                             
         # ("Eduard-10",EduardDataset(10)),                           
         ("PaviaDataset, 1x1",traintestsplit(SampleLandCoverDataset(9*30, 1, "Pavia", rng = my_rng())...,0.8)),                             
         ("PaviaDataset, 3x3 flattened",traintestsplit(SampleLandCoverDataset(9*30, 3, "Pavia", flattened = true, rng = my_rng())...,0.8)), 
         ("PaviaDataset, 3x3",traintestsplit(SampleLandCoverDataset(9*30, 3, "Pavia", rng = my_rng())...,0.8)),                             
         ("IndianPinesCorrectedDataset, 1x1",traintestsplit(SampleLandCoverDataset(16*30, 1, "IndianPinesCorrected", rng = my_rng())...,0.8)),                                                                    
         ("IndianPinesCorrectedDataset, 3x3 flattened",traintestsplit(SampleLandCoverDataset(16*30, 3, flattened = true, "IndianPinesCorrected", rng = my_rng())...,0.8)),                                        
         ("IndianPinesCorrectedDataset, 3x3",traintestsplit(SampleLandCoverDataset(16*30, 3, "IndianPinesCorrected", rng = my_rng())...,0.8)),                                                                    
         ("PaviaDataset, 5x5",traintestsplit(SampleLandCoverDataset(9*30, 5, "Pavia", rng = my_rng())...,0.8)),                             
         ("IndianPinesCorrectedDataset, 5x5",traintestsplit(SampleLandCoverDataset(16*30, 5, "IndianPinesCorrected", rng = my_rng())...,0.8)),                                                                    
         # ("PaviaDataset, 4x4",traintestsplit(SampleLandCoverDataset(9*30, 4, "Pavia", rng = my_rng())...,0.8)),                           
         # ("IndianPinesCorrectedDataset, 4x4",traintestsplit(SampleLandCoverDataset(16*30, 4, "IndianPinesCorrected", rng = my_rng())...,0.8)),                                                                  
       ];                                                             
^[[200~kwargs = (
  initCondition=DecisionTree.startAtCenter,
  ontology=getIntervalTopologicalOntologyOfDim(Val(2)),
  # test_operators=[ModalLogic.TestOpLes],
  # test_operators=[ModalLogic.TestOpGeq],
)^[[201~

julia> args = (                                                       
         max_depth=-1,                                                
         min_samples_leaf=4,                                          
         min_samples_split=8,                                         
         # min_purity_increase=0.02,                                  
         # max_purity_split=1.0, # TODO there's something wrong here, I think this sets min_purity_increase.                                
       )                                                              
(max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)

julia> kwargs = (                                                     
         initCondition=DecisionTree.startAtCenter,                    
         ontology=getIntervalTopologicalOntologyOfDim(Val(2)),        
         # test_operators=[ModalLogic.TestOpLes],                     
         # test_operators=[ModalLogic.TestOpGeq],                     
       )                                                              
(initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_TPPi(), _Topo_NTPPi(), _Topo_TPP(), _Topo_DC(), _Topo_PO(), _Topo_NTPP(), _Topo_EC()]))

julia> kwargs = (                                                     
         initCondition=DecisionTree.startAtCenter,                    
         ontology=getIntervalTopologicalOntologyOfDim(Val(2)),        
         # test_operators=[ModalLogic.TestOpLes],                     
         # test_operators=[ModalLogic.TestOpGeq],                     
       )                                                              
(initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_TPPi(), _Topo_NTPPi(), _Topo_TPP(), _Topo_DC(), _Topo_PO(), _Topo_NTPP(), _Topo_EC()]))

julia> timeit = true                                                  
true

julia> T = testDataset(datasets[1], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'PaviaDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_TPPi(), _Topo_NTPPi(), _Topo_TPP(), _Topo_DC(), _Topo_PO(), _Topo_NTPP(), _Topo_EC()]))
 train size = (1, 1, 216, 103)
^[[200~T = testDataset(datasets[3], timeit, args=args, kwargs=kwargs);^[[201~
^[[200~T = testDataset(datasets[4], timeit, args=args, kwargs=kwargs);^[[201~
^[[200~T = testDataset(datasets[6], timeit, args=args, kwargs=kwargs);^[[201~
  14.044 s (106713859 allocations: 5.96 GiB)
 test size = (1, 1, 54, 103)
 Purity threshold 1.0
  acc: 68.52% kappa: 64.58% 9×9 Array{Int64,2}:
 4  0  0  0  0  0  2  0  0
 0  2  1  1  0  2  0  0  0
 0  1  2  0  0  0  0  3  0
 0  2  0  4  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  2  1  0  2  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
nodes: (51, height: 9)

julia> T = testDataset(datasets[3], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_TPPi(), _Topo_NTPPi(), _Topo_TPP(), _Topo_DC(), _Topo_PO(), _Topo_NTPP(), _Topo_EC()]))
 train size = (3, 3, 216, 103)
  63.460 s (467214258 allocations: 26.15 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 70.37% kappa: 66.67% 9×9 Array{Int64,2}:
 4  0  0  0  0  2  0  0  0
 0  3  0  0  0  2  0  1  0
 0  0  4  0  0  0  1  1  0
 0  0  0  6  0  0  0  0  0
 0  0  2  0  4  0  0  0  0
 0  2  0  0  0  4  0  0  0
 2  0  0  0  0  0  4  0  0
 0  0  3  0  0  0  0  3  0
 0  0  0  0  0  0  0  0  6
nodes: (45, height: 7)

julia> T = testDataset(datasets[4], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'IndianPinesCorrectedDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[_Topo_TPPi(), _Topo_NTPPi(), _Topo_TPP(), _Topo_DC(), _Topo_PO(), _Topo_NTPP(), _Topo_EC()]))
 train size = (1, 1, 384, 200)
  49.528 s (437856073 allocations: 24.42 GiB)
 test size = (1, 1, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  1  2  0  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  0  0  0  0  1
 0  1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  4  0  0  0  1  0  0  0  0  1  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  2  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  4  0  0  0  0  0  1  0
 0  2  0  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  0  2  0  0  0  0  0  0  3  0  0  0  0  0
 0  1  0  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  0  0  2  0  0  1  0  0  0  0  1  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (97, height: 9)

julia> T = testDataset(datasets[6], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = On
tology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._To
poRel[_Topo_TPPi(), _Topo_NTPPi(), _Topo_TPP(), _Topo_DC(), _Topo_PO()
, _Topo_NTPP(), _Topo_EC()]))
 train size = (3, 3, 384, 200)
^[[200~kwargs = (
  initCondition=DecisionTree.startAtCenter,
  # initCondition=DecisionTree.startWithRelationAll,
  ontology=getIntervalOntologyOfDim(Val(2))
  # ontology=getIntervalTopologicalOntologyOfDim(Val(2)),
  # test_operators=[ModalLogic.TestOpLes],
  # test_operators=[ModalLogic.TestOpGeq],
)^[[201~
^[[200~T = testDataset(datasets[1], timeit, args=args, kwargs=kwargs);
^[[201~
^[[200~T = testDataset(datasets[3], timeit, args=args, kwargs=kwargs);
^[[201~
^[[200~T = testDataset(datasets[4], timeit, args=args, kwargs=kwargs);
^[[201~
^[[200~T = testDataset(datasets[6], timeit, args=args, kwargs=kwargs);
^[[201~
  571.373 s (4507787463 allocations: 265.65 GiB)
 test size = (3, 3, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
 0  4  1  0  0  0  0  0  0  1  0  0  0  0  0  0
 0  2  3  1  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  2  0  0  0  0  0  1  2  1  0  0  0  0  0
 0  0  0  1  5  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  5  0  0  0  0  0  0  0  0  1  0
 0  0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 1  0  0  0  0  0  1  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0  0
 0  1  0  0  0  0  0  0  0  4  1  0  0  0  0  0
 0  1  1  1  0  0  0  0  0  0  1  2  0  0  0  0
 0  1  3  1  0  0  0  0  0  0  0  1  0  0  0  0
 0  0  0  1  1  0  0  0  0  0  0  0  4  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  5  1  0
 0  0  0  0  0  0  1  0  0  0  0  0  0  2  3  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (81, height: 8)

julia> kwargs = (                                                                                                                 
         initCondition=DecisionTree.startAtCenter,                                                                                
         # initCondition=DecisionTree.startWithRelationAll,                                                                       
         ontology=getIntervalOntologyOfDim(Val(2))                                                                                
         # ontology=getIntervalTopologicalOntologyOfDim(Val(2)),                                                                  
         # test_operators=[ModalLogic.TestOpLes],                                                                                 
         # test_operators=[ModalLogic.TestOpGeq],                                                                                 
       )                                                                                                                          
(initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[_IA2DRel{_IA_O,_IA_A}(_IA_O(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Ai}(_IA_Ei(), _IA_Ai()), _IA2DRel{_IA_L,_IA_L}(_IA_L(), _IA_L()), _IA2DRel{_RelationId,_IA_Oi}(_RelationId(), _IA_Oi()), _IA2DRel{_IA_D,_IA_E}(_IA_D(), _IA_E()), _IA2DRel{_IA_Ei,_IA_D}(_IA_Ei(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Bi}(_IA_Bi(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_L}(_IA_Ai(), _IA_L()), _IA2DRel{_IA_Ei,_IA_Li}(_IA_Ei(), _IA_Li()), _IA2DRel{_IA_D,_IA_L}(_IA_D(), _IA_L())  …  _IA2DRel{_IA_A,_RelationId}(_IA_A(), _RelationId()), _IA2DRel{_IA_E,_IA_D}(_IA_E(), _IA_D()), _IA2DRel{_IA_Li,_IA_O}(_IA_Li(), _IA_O()), _IA2DRel{_IA_O,_IA_Ai}(_IA_O(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_Ai}(_IA_Oi(), _IA_Ai()), _IA2DRel{_IA_O,_IA_Ei}(_IA_O(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_D}(_IA_Ai(), _IA_D()), _IA2DRel{_IA_A,_IA_E}(_IA_A(), _IA_E()), _IA2DRel{_IA_Di,_IA_Di}(_IA_Di(), _IA_Di()), _IA2DRel{_IA_D,_IA_B}(_IA_D(), _IA_B())]))

julia> T = testDataset(datasets[1], timeit, args=args, kwargs=kwargs);                                                            
Benchmarking dataset 'PaviaDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[_IA2DRel{_IA_O,_IA_A}(_IA_O(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Ai}(_IA_Ei(), _IA_Ai()), _IA2DRel{_IA_L,_IA_L}(_IA_L(), _IA_L()), _IA2DRel{_RelationId,_IA_Oi}(_RelationId(), _IA_Oi()), _IA2DRel{_IA_D,_IA_E}(_IA_D(), _IA_E()), _IA2DRel{_IA_Ei,_IA_D}(_IA_Ei(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Bi}(_IA_Bi(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_L}(_IA_Ai(), _IA_L()), _IA2DRel{_IA_Ei,_IA_Li}(_IA_Ei(), _IA_Li()), _IA2DRel{_IA_D,_IA_L}(_IA_D(), _IA_L()), _IA2DRel{_IA_L,_IA_B}(_IA_L(), _IA_B()), _IA2DRel{_IA_O,_IA_L}(_IA_O(), _IA_L()), _IA2DRel{_IA_Oi,_IA_D}(_IA_Oi(), _IA_D()), _IA2DRel{_IA_D,_IA_Ai}(_IA_D(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_O}(_IA_Oi(), _IA_O()), _IA2DRel{_IA_D,_IA_Li}(_IA_D(), _IA_Li()), _IA2DRel{_IA_Di,_IA_Ei}(_IA_Di(), _IA_Ei()), _IA2DRel{_IA_B,_IA_D}(_IA_B(), _IA_D()), _IA2DRel{_IA_Oi,_IA_Di}(_IA_Oi(), _IA_Di()), _IA2DRel{_IA_A,_IA_O}(_IA_A(), _IA_O()), _IA2DRel{_IA_Ai,_IA_Ei}(_IA_Ai(), _IA_Ei()), _IA2DRel{_IA_D,_IA_Di}(_IA_D(), _IA_Di()), _IA2DRel{_IA_O,_IA_D}(_IA_O(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Ei}(_IA_Bi(), _IA_Ei()), _IA2DRel{_IA_A,_IA_Oi}(_IA_A(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Ei}(_IA_B(), _IA_Ei()), _IA2DRel{_IA_Bi,_IA_B}(_IA_Bi(), _IA_B()), _IA2DRel{_IA_Ai,_IA_E}(_IA_Ai(), _IA_E()), _IA2DRel{_IA_Ai,_RelationId}(_IA_Ai(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Bi}(_IA_Ai(), _IA_Bi()), _IA2DRel{_IA_Oi,_IA_L}(_IA_Oi(), _IA_L()), _IA2DRel{_IA_L,_IA_O}(_IA_L(), _IA_O()), _IA2DRel{_IA_A,_IA_A}(_IA_A(), _IA_A()), _IA2DRel{_IA_Di,_IA_Oi}(_IA_Di(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_A}(_IA_Bi(), _IA_A()), _IA2DRel{_IA_Oi,_RelationId}(_IA_Oi(), _RelationId()), _IA2DRel{_IA_Oi,_IA_E}(_IA_Oi(), _IA_E()), _IA2DRel{_IA_Di,_IA_Ai}(_IA_Di(), _IA_Ai()), _IA2DRel{_IA_A,_IA_Ai}(_IA_A(), _IA_Ai()), _IA2DRel{_IA_E,_RelationId}(_IA_E(), _RelationId()), _IA2DRel{_IA_Li,_IA_D}(_IA_Li(), _IA_D()), _IA2DRel{_IA_E,_IA_Ei}(_IA_E(), _IA_Ei()), _IA2DRel{_IA_B,_IA_A}(_IA_B(), _IA_A()), _IA2DRel{_IA_L,_IA_Ei}(_IA_L(), _IA_Ei()), _IA2DRel{_IA_Ei,_RelationId}(_IA_Ei(), _RelationId()), _IA2DRel{_IA_A,_IA_D}(_IA_A(), _IA_D()), _IA2DRel{_IA_Bi,_IA_E}(_IA_Bi(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Li}(_IA_Oi(), _IA_Li()), _IA2DRel{_IA_D,_IA_A}(_IA_D(), _IA_A()), _IA2DRel{_IA_E,_IA_Li}(_IA_E(), _IA_Li()), _IA2DRel{_IA_E,_IA_B}(_IA_E(), _IA_B()), _IA2DRel{_IA_Li,_IA_A}(_IA_Li(), _IA_A()), _IA2DRel{_IA_Di,_IA_B}(_IA_Di(), _IA_B()), _IA2DRel{_IA_Li,_IA_Li}(_IA_Li(), _IA_Li()), _IA2DRel{_IA_Li,_RelationId}(_IA_Li(), _RelationId()), _IA2DRel{_IA_Ei,_IA_Di}(_IA_Ei(), _IA_Di()), _IA2DRel{_IA_D,_IA_Oi}(_IA_D(), _IA_Oi()), _IA2DRel{_IA_Li,_IA_Ei}(_IA_Li(), _IA_Ei()), _IA2DRel{_IA_Oi,_IA_Oi}(_IA_Oi(), _IA_Oi()), _IA2DRel{_RelationId,_IA_D}(_RelationId(), _IA_D()), _IA2DRel{_IA_B,_IA_L}(_IA_B(), _IA_L()), _IA2DRel{_IA_D,_RelationId}(_IA_D(), _RelationId()), _IA2DRel{_IA_Li,_IA_Ai}(_IA_Li(), _IA_Ai()), _IA2DRel{_RelationId,_IA_E}(_RelationId(), _IA_E()), _IA2DRel{_IA_Bi,_IA_Di}(_IA_Bi(), _IA_Di()), _IA2DRel{_IA_Bi,_IA_Oi}(_IA_Bi(), _IA_Oi()), _IA2DRel{_IA_Di,_IA_A}(_IA_Di(), _IA_A()), _IA2DRel{_IA_Li,_IA_Di}(_IA_Li(), _IA_Di()), _IA2DRel{_IA_L,_IA_Oi}(_IA_L(), _IA_Oi()), _IA2DRel{_IA_D,_IA_Bi}(_IA_D(), _IA_Bi()), _IA2DRel{_RelationId,_IA_B}(_RelationId(), _IA_B()), _IA2DRel{_RelationId,_IA_Ei}(_RelationId(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_O}(_IA_Ai(), _IA_O()), _IA2DRel{_IA_Bi,_IA_D}(_IA_Bi(), _IA_D()), _IA2DRel{_IA_B,_IA_Ai}(_IA_B(), _IA_Ai()), _IA2DRel{_RelationId,_IA_Di}(_RelationId(), _IA_Di()), _IA2DRel{_IA_B,_IA_Li}(_IA_B(), _IA_Li()), _IA2DRel{_IA_Di,_IA_O}(_IA_Di(), _IA_O()), _IA2DRel{_IA_Bi,_IA_L}(_IA_Bi(), _IA_L()), _IA2DRel{_RelationId,_IA_Ai}(_RelationId(), _IA_Ai()), _IA2DRel{_IA_B,_IA_Oi}(_IA_B(), _IA_Oi()), _IA2DRel{_IA_Li,_IA_Bi}(_IA_Li(), _IA_Bi()), _IA2DRel{_IA_L,_IA_Li}(_IA_L(), _IA_Li()), _IA2DRel{_IA_A,_IA_L}(_IA_A(), _IA_L()), _IA2DRel{_IA_Ei,_IA_L}(_IA_Ei(), _IA_L()), _IA2DRel{_IA_Li,_IA_L}(_IA_Li(), _IA_L()), _IA2DRel{_IA_Bi,_IA_Li}(_IA_Bi(), _IA_Li()), _IA2DRel{_IA_B,_IA_Bi}(_IA_B(), _IA_Bi()), _IA2DRel{_IA_D,_IA_O}(_IA_D(), _IA_O()), _IA2DRel{_IA_O,_IA_Oi}(_IA_O(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_Ai}(_IA_Bi(), _IA_Ai()), _IA2DRel{_IA_L,_RelationId}(_IA_L(), _RelationId()), _IA2DRel{_IA_Di,_IA_D}(_IA_Di(), _IA_D()), _IA2DRel{_RelationId,_IA_Bi}(_RelationId(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_Oi}(_IA_Ai(), _IA_Oi()), _IA2DRel{_IA_Bi,_RelationId}(_IA_Bi(), _RelationId()), _IA2DRel{_IA_Di,_RelationId}(_IA_Di(), _RelationId()), _IA2DRel{_IA_Ei,_IA_O}(_IA_Ei(), _IA_O()), _IA2DRel{_IA_B,_IA_O}(_IA_B(), _IA_O()), _IA2DRel{_IA_Ei,_IA_A}(_IA_Ei(), _IA_A()), _IA2DRel{_IA_L,_IA_Bi}(_IA_L(), _IA_Bi()), _IA2DRel{_IA_A,_IA_Bi}(_IA_A(), _IA_Bi()), _IA2DRel{_IA_O,_IA_B}(_IA_O(), _IA_B()), _IA2DRel{_IA_Oi,_IA_B}(_IA_Oi(), _IA_B()), _IA2DRel{_IA_O,_IA_E}(_IA_O(), _IA_E()), _IA2DRel{_IA_Di,_IA_Bi}(_IA_Di(), _IA_Bi()), _IA2DRel{_RelationId,_IA_O}(_RelationId(), _IA_O()), _IA2DRel{_IA_B,_IA_E}(_IA_B(), _IA_E()), _IA2DRel{_IA_B,_IA_B}(_IA_B(), _IA_B()), _IA2DRel{_IA_A,_IA_Di}(_IA_A(), _IA_Di()), _IA2DRel{_IA_O,_IA_Di}(_IA_O(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_Ai}(_IA_Ai(), _IA_Ai()), _IA2DRel{_IA_E,_IA_E}(_IA_E(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Ei}(_IA_Oi(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Ai}(_IA_E(), _IA_Ai()), _IA2DRel{_IA_Li,_IA_E}(_IA_Li(), _IA_E()), _IA2DRel{_IA_O,_RelationId}(_IA_O(), _RelationId()), _IA2DRel{_IA_E,_IA_Di}(_IA_E(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_A}(_IA_Ai(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Bi}(_IA_Ei(), _IA_Bi()), _IA2DRel{_IA_O,_IA_Bi}(_IA_O(), _IA_Bi()), _IA2DRel{_IA_E,_IA_O}(_IA_E(), _IA_O()), _IA2DRel{_IA_Ei,_IA_E}(_IA_Ei(), _IA_E()), _IA2DRel{_IA_Di,_IA_Li}(_IA_Di(), _IA_Li()), _IA2DRel{_IA_L,_IA_D}(_IA_L(), _IA_D()), _IA2DRel{_IA_E,_IA_Oi}(_IA_E(), _IA_Oi()), _IA2DRel{_IA_A,_IA_Li}(_IA_A(), _IA_Li()), _IA2DRel{_IA_O,_IA_O}(_IA_O(), _IA_O()), _IA2DRel{_IA_Li,_IA_Oi}(_IA_Li(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Di}(_IA_B(), _IA_Di()), _IA2DRel{_RelationId,_IA_Li}(_RelationId(), _IA_Li()), _IA2DRel{_IA_L,_IA_Ai}(_IA_L(), _IA_Ai()), _IA2DRel{_IA_E,_IA_A}(_IA_E(), _IA_A()), _IA2DRel{_RelationId,_IA_L}(_RelationId(), _IA_L()), _IA2DRel{_IA_A,_IA_Ei}(_IA_A(), _IA_Ei()), _IA2DRel{_RelationId,_IA_A}(_RelationId(), _IA_A()), _IA2DRel{_IA_E,_IA_L}(_IA_E(), _IA_L()), _IA2DRel{_IA_Bi,_IA_O}(_IA_Bi(), _IA_O()), _IA2DRel{_IA_Di,_IA_L}(_IA_Di(), _IA_L()), _IA2DRel{_IA_Oi,_IA_A}(_IA_Oi(), _IA_A()), _IA2DRel{_IA_D,_IA_D}(_IA_D(), _IA_D()), _IA2DRel{_IA_Ai,_IA_B}(_IA_Ai(), _IA_B()), _IA2DRel{_IA_O,_IA_Li}(_IA_O(), _IA_Li()), _IA2DRel{_IA_Oi,_IA_Bi}(_IA_Oi(), _IA_Bi()), _IA2DRel{_IA_L,_IA_A}(_IA_L(), _IA_A()), _IA2DRel{_IA_B,_RelationId}(_IA_B(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Li}(_IA_Ai(), _IA_Li()), _IA2DRel{_IA_A,_IA_B}(_IA_A(), _IA_B()), _IA2DRel{_IA_Ei,_IA_B}(_IA_Ei(), _IA_B()), _IA2DRel{_IA_Di,_IA_E}(_IA_Di(), _IA_E()), _IA2DRel{_IA_L,_IA_Di}(_IA_L(), _IA_Di()), _IA2DRel{_IA_Ei,_IA_Oi}(_IA_Ei(), _IA_Oi()), _IA2DRel{_IA_Ei,_IA_Ei}(_IA_Ei(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Bi}(_IA_E(), _IA_Bi()), _IA2DRel{_IA_D,_IA_Ei}(_IA_D(), _IA_Ei()), _IA2DRel{_IA_Li,_IA_B}(_IA_Li(), _IA_B()), _IA2DRel{_IA_Ai,_IA_Di}(_IA_Ai(), _IA_Di()), _IA2DRel{_IA_L,_IA_E}(_IA_L(), _IA_E()), _IA2DRel{_IA_A,_RelationId}(_IA_A(), _RelationId()), _IA2DRel{_IA_E,_IA_D}(_IA_E(), _IA_D()), _IA2DRel{_IA_Li,_IA_O}(_IA_Li(), _IA_O()), _IA2DRel{_IA_O,_IA_Ai}(_IA_O(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_Ai}(_IA_Oi(), _IA_Ai()), _IA2DRel{_IA_O,_IA_Ei}(_IA_O(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_D}(_IA_Ai(), _IA_D()), _IA2DRel{_IA_A,_IA_E}(_IA_A(), _IA_E()), _IA2DRel{_IA_Di,_IA_Di}(_IA_Di(), _IA_Di()), _IA2DRel{_IA_D,_IA_B}(_IA_D(), _IA_B())]))
 train size = (1, 1, 216, 103)
  35.245 s (405883207 allocations: 24.44 GiB)
 test size = (1, 1, 54, 103)
 Purity threshold 1.0
  acc: 68.52% kappa: 64.58% 9×9 Array{Int64,2}:
 4  0  0  0  0  0  2  0  0
 0  2  1  1  0  2  0  0  0
 0  1  2  0  0  0  0  3  0
 0  2  0  4  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  2  1  0  2  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
nodes: (51, height: 9)

julia> T = testDataset(datasets[3], timeit, args=args, kwargs=kwargs);                                                            
Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[_IA2DRel{_IA_O,_IA_A}(_IA_O(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Ai}(_IA_Ei(), _IA_Ai()), _IA2DRel{_IA_L,_IA_L}(_IA_L(), _IA_L()), _IA2DRel{_RelationId,_IA_Oi}(_RelationId(), _IA_Oi()), _IA2DRel{_IA_D,_IA_E}(_IA_D(), _IA_E()), _IA2DRel{_IA_Ei,_IA_D}(_IA_Ei(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Bi}(_IA_Bi(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_L}(_IA_Ai(), _IA_L()), _IA2DRel{_IA_Ei,_IA_Li}(_IA_Ei(), _IA_Li()), _IA2DRel{_IA_D,_IA_L}(_IA_D(), _IA_L()), _IA2DRel{_IA_L,_IA_B}(_IA_L(), _IA_B()), _IA2DRel{_IA_O,_IA_L}(_IA_O(), _IA_L()), _IA2DRel{_IA_Oi,_IA_D}(_IA_Oi(), _IA_D()), _IA2DRel{_IA_D,_IA_Ai}(_IA_D(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_O}(_IA_Oi(), _IA_O()), _IA2DRel{_IA_D,_IA_Li}(_IA_D(), _IA_Li()), _IA2DRel{_IA_Di,_IA_Ei}(_IA_Di(), _IA_Ei()), _IA2DRel{_IA_B,_IA_D}(_IA_B(), _IA_D()), _IA2DRel{_IA_Oi,_IA_Di}(_IA_Oi(), _IA_Di()), _IA2DRel{_IA_A,_IA_O}(_IA_A(), _IA_O()), _IA2DRel{_IA_Ai,_IA_Ei}(_IA_Ai(), _IA_Ei()), _IA2DRel{_IA_D,_IA_Di}(_IA_D(), _IA_Di()), _IA2DRel{_IA_O,_IA_D}(_IA_O(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Ei}(_IA_Bi(), _IA_Ei()), _IA2DRel{_IA_A,_IA_Oi}(_IA_A(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Ei}(_IA_B(), _IA_Ei()), _IA2DRel{_IA_Bi,_IA_B}(_IA_Bi(), _IA_B()), _IA2DRel{_IA_Ai,_IA_E}(_IA_Ai(), _IA_E()), _IA2DRel{_IA_Ai,_RelationId}(_IA_Ai(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Bi}(_IA_Ai(), _IA_Bi()), _IA2DRel{_IA_Oi,_IA_L}(_IA_Oi(), _IA_L()), _IA2DRel{_IA_L,_IA_O}(_IA_L(), _IA_O()), _IA2DRel{_IA_A,_IA_A}(_IA_A(), _IA_A()), _IA2DRel{_IA_Di,_IA_Oi}(_IA_Di(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_A}(_IA_Bi(), _IA_A()), _IA2DRel{_IA_Oi,_RelationId}(_IA_Oi(), _RelationId()), _IA2DRel{_IA_Oi,_IA_E}(_IA_Oi(), _IA_E()), _IA2DRel{_IA_Di,_IA_Ai}(_IA_Di(), _IA_Ai()), _IA2DRel{_IA_A,_IA_Ai}(_IA_A(), _IA_Ai()), _IA2DRel{_IA_E,_RelationId}(_IA_E(), _RelationId()), _IA2DRel{_IA_Li,_IA_D}(_IA_Li(), _IA_D()), _IA2DRel{_IA_E,_IA_Ei}(_IA_E(), _IA_Ei()), _IA2DRel{_IA_B,_IA_A}(_IA_B(), _IA_A()), _IA2DRel{_IA_L,_IA_Ei}(_IA_L(), _IA_Ei()), _IA2DRel{_IA_Ei,_RelationId}(_IA_Ei(), _RelationId()), _IA2DRel{_IA_A,_IA_D}(_IA_A(), _IA_D()), _IA2DRel{_IA_Bi,_IA_E}(_IA_Bi(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Li}(_IA_Oi(), _IA_Li()), _IA2DRel{_IA_D,_IA_A}(_IA_D(), _IA_A()), _IA2DRel{_IA_E,_IA_Li}(_IA_E(), _IA_Li()), _IA2DRel{_IA_E,_IA_B}(_IA_E(), _IA_B()), _IA2DRel{_IA_Li,_IA_A}(_IA_Li(), _IA_A()), _IA2DRel{_IA_Di,_IA_B}(_IA_Di(), _IA_B()), _IA2DRel{_IA_Li,_IA_Li}(_IA_Li(), _IA_Li()), _IA2DRel{_IA_Li,_RelationId}(_IA_Li(), _RelationId()), _IA2DRel{_IA_Ei,_IA_Di}(_IA_Ei(), _IA_Di()), _IA2DRel{_IA_D,_IA_Oi}(_IA_D(), _IA_Oi()), _IA2DRel{_IA_Li,_IA_Ei}(_IA_Li(), _IA_Ei()), _IA2DRel{_IA_Oi,_IA_Oi}(_IA_Oi(), _IA_Oi()), _IA2DRel{_RelationId,_IA_D}(_RelationId(), _IA_D()), _IA2DRel{_IA_B,_IA_L}(_IA_B(), _IA_L()), _IA2DRel{_IA_D,_RelationId}(_IA_D(), _RelationId()), _IA2DRel{_IA_Li,_IA_Ai}(_IA_Li(), _IA_Ai()), _IA2DRel{_RelationId,_IA_E}(_RelationId(), _IA_E()), _IA2DRel{_IA_Bi,_IA_Di}(_IA_Bi(), _IA_Di()), _IA2DRel{_IA_Bi,_IA_Oi}(_IA_Bi(), _IA_Oi()), _IA2DRel{_IA_Di,_IA_A}(_IA_Di(), _IA_A()), _IA2DRel{_IA_Li,_IA_Di}(_IA_Li(), _IA_Di()), _IA2DRel{_IA_L,_IA_Oi}(_IA_L(), _IA_Oi()), _IA2DRel{_IA_D,_IA_Bi}(_IA_D(), _IA_Bi()), _IA2DRel{_RelationId,_IA_B}(_RelationId(), _IA_B()), _IA2DRel{_RelationId,_IA_Ei}(_RelationId(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_O}(_IA_Ai(), _IA_O()), _IA2DRel{_IA_Bi,_IA_D}(_IA_Bi(), _IA_D()), _IA2DRel{_IA_B,_IA_Ai}(_IA_B(), _IA_Ai()), _IA2DRel{_RelationId,_IA_Di}(_RelationId(), _IA_Di()), _IA2DRel{_IA_B,_IA_Li}(_IA_B(), _IA_Li()), _IA2DRel{_IA_Di,_IA_O}(_IA_Di(), _IA_O()), _IA2DRel{_IA_Bi,_IA_L}(_IA_Bi(), _IA_L()), _IA2DRel{_RelationId,_IA_Ai}(_RelationId(), _IA_Ai()), _IA2DRel{_IA_B,_IA_Oi}(_IA_B(), _IA_Oi()), _IA2DRel{_IA_Li,_IA_Bi}(_IA_Li(), _IA_Bi()), _IA2DRel{_IA_L,_IA_Li}(_IA_L(), _IA_Li()), _IA2DRel{_IA_A,_IA_L}(_IA_A(), _IA_L()), _IA2DRel{_IA_Ei,_IA_L}(_IA_Ei(), _IA_L()), _IA2DRel{_IA_Li,_IA_L}(_IA_Li(), _IA_L()), _IA2DRel{_IA_Bi,_IA_Li}(_IA_Bi(), _IA_Li()), _IA2DRel{_IA_B,_IA_Bi}(_IA_B(), _IA_Bi()), _IA2DRel{_IA_D,_IA_O}(_IA_D(), _IA_O()), _IA2DRel{_IA_O,_IA_Oi}(_IA_O(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_Ai}(_IA_Bi(), _IA_Ai()), _IA2DRel{_IA_L,_RelationId}(_IA_L(), _RelationId()), _IA2DRel{_IA_Di,_IA_D}(_IA_Di(), _IA_D()), _IA2DRel{_RelationId,_IA_Bi}(_RelationId(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_Oi}(_IA_Ai(), _IA_Oi()), _IA2DRel{_IA_Bi,_RelationId}(_IA_Bi(), _RelationId()), _IA2DRel{_IA_Di,_RelationId}(_IA_Di(), _RelationId()), _IA2DRel{_IA_Ei,_IA_O}(_IA_Ei(), _IA_O()), _IA2DRel{_IA_B,_IA_O}(_IA_B(), _IA_O()), _IA2DRel{_IA_Ei,_IA_A}(_IA_Ei(), _IA_A()), _IA2DRel{_IA_L,_IA_Bi}(_IA_L(), _IA_Bi()), _IA2DRel{_IA_A,_IA_Bi}(_IA_A(), _IA_Bi()), _IA2DRel{_IA_O,_IA_B}(_IA_O(), _IA_B()), _IA2DRel{_IA_Oi,_IA_B}(_IA_Oi(), _IA_B()), _IA2DRel{_IA_O,_IA_E}(_IA_O(), _IA_E()), _IA2DRel{_IA_Di,_IA_Bi}(_IA_Di(), _IA_Bi()), _IA2DRel{_RelationId,_IA_O}(_RelationId(), _IA_O()), _IA2DRel{_IA_B,_IA_E}(_IA_B(), _IA_E()), _IA2DRel{_IA_B,_IA_B}(_IA_B(), _IA_B()), _IA2DRel{_IA_A,_IA_Di}(_IA_A(), _IA_Di()), _IA2DRel{_IA_O,_IA_Di}(_IA_O(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_Ai}(_IA_Ai(), _IA_Ai()), _IA2DRel{_IA_E,_IA_E}(_IA_E(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Ei}(_IA_Oi(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Ai}(_IA_E(), _IA_Ai()), _IA2DRel{_IA_Li,_IA_E}(_IA_Li(), _IA_E()), _IA2DRel{_IA_O,_RelationId}(_IA_O(), _RelationId()), _IA2DRel{_IA_E,_IA_Di}(_IA_E(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_A}(_IA_Ai(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Bi}(_IA_Ei(), _IA_Bi()), _IA2DRel{_IA_O,_IA_Bi}(_IA_O(), _IA_Bi()), _IA2DRel{_IA_E,_IA_O}(_IA_E(), _IA_O()), _IA2DRel{_IA_Ei,_IA_E}(_IA_Ei(), _IA_E()), _IA2DRel{_IA_Di,_IA_Li}(_IA_Di(), _IA_Li()), _IA2DRel{_IA_L,_IA_D}(_IA_L(), _IA_D()), _IA2DRel{_IA_E,_IA_Oi}(_IA_E(), _IA_Oi()), _IA2DRel{_IA_A,_IA_Li}(_IA_A(), _IA_Li()), _IA2DRel{_IA_O,_IA_O}(_IA_O(), _IA_O()), _IA2DRel{_IA_Li,_IA_Oi}(_IA_Li(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Di}(_IA_B(), _IA_Di()), _IA2DRel{_RelationId,_IA_Li}(_RelationId(), _IA_Li()), _IA2DRel{_IA_L,_IA_Ai}(_IA_L(), _IA_Ai()), _IA2DRel{_IA_E,_IA_A}(_IA_E(), _IA_A()), _IA2DRel{_RelationId,_IA_L}(_RelationId(), _IA_L()), _IA2DRel{_IA_A,_IA_Ei}(_IA_A(), _IA_Ei()), _IA2DRel{_RelationId,_IA_A}(_RelationId(), _IA_A()), _IA2DRel{_IA_E,_IA_L}(_IA_E(), _IA_L()), _IA2DRel{_IA_Bi,_IA_O}(_IA_Bi(), _IA_O()), _IA2DRel{_IA_Di,_IA_L}(_IA_Di(), _IA_L()), _IA2DRel{_IA_Oi,_IA_A}(_IA_Oi(), _IA_A()), _IA2DRel{_IA_D,_IA_D}(_IA_D(), _IA_D()), _IA2DRel{_IA_Ai,_IA_B}(_IA_Ai(), _IA_B()), _IA2DRel{_IA_O,_IA_Li}(_IA_O(), _IA_Li()), _IA2DRel{_IA_Oi,_IA_Bi}(_IA_Oi(), _IA_Bi()), _IA2DRel{_IA_L,_IA_A}(_IA_L(), _IA_A()), _IA2DRel{_IA_B,_RelationId}(_IA_B(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Li}(_IA_Ai(), _IA_Li()), _IA2DRel{_IA_A,_IA_B}(_IA_A(), _IA_B()), _IA2DRel{_IA_Ei,_IA_B}(_IA_Ei(), _IA_B()), _IA2DRel{_IA_Di,_IA_E}(_IA_Di(), _IA_E()), _IA2DRel{_IA_L,_IA_Di}(_IA_L(), _IA_Di()), _IA2DRel{_IA_Ei,_IA_Oi}(_IA_Ei(), _IA_Oi()), _IA2DRel{_IA_Ei,_IA_Ei}(_IA_Ei(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Bi}(_IA_E(), _IA_Bi()), _IA2DRel{_IA_D,_IA_Ei}(_IA_D(), _IA_Ei()), _IA2DRel{_IA_Li,_IA_B}(_IA_Li(), _IA_B()), _IA2DRel{_IA_Ai,_IA_Di}(_IA_Ai(), _IA_Di()), _IA2DRel{_IA_L,_IA_E}(_IA_L(), _IA_E()), _IA2DRel{_IA_A,_RelationId}(_IA_A(), _RelationId()), _IA2DRel{_IA_E,_IA_D}(_IA_E(), _IA_D()), _IA2DRel{_IA_Li,_IA_O}(_IA_Li(), _IA_O()), _IA2DRel{_IA_O,_IA_Ai}(_IA_O(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_Ai}(_IA_Oi(), _IA_Ai()), _IA2DRel{_IA_O,_IA_Ei}(_IA_O(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_D}(_IA_Ai(), _IA_D()), _IA2DRel{_IA_A,_IA_E}(_IA_A(), _IA_E()), _IA2DRel{_IA_Di,_IA_Di}(_IA_Di(), _IA_Di()), _IA2DRel{_IA_D,_IA_B}(_IA_D(), _IA_B())]))
 train size = (3, 3, 216, 103)
  93.462 s (497315580 allocations: 30.71 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 77.78% kappa: 75.0% 9×9 Array{Int64,2}:
 5  0  1  0  0  0  0  0  0
 0  5  0  0  0  1  0  0  0
 0  0  4  0  0  2  0  0  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  3  1  1  1  0
 0  2  0  0  0  4  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  2  0  3  0
 0  0  0  0  0  0  0  0  6
nodes: (35, height: 7)

julia> T = testDataset(datasets[4], timeit, args=args, kwargs=kwargs);                                                            
Benchmarking dataset 'IndianPinesCorrectedDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[_IA2DRel{_IA_O,_IA_A}(_IA_O(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Ai}(_IA_Ei(), _IA_Ai()), _IA2DRel{_IA_L,_IA_L}(_IA_L(), _IA_L()), _IA2DRel{_RelationId,_IA_Oi}(_RelationId(), _IA_Oi()), _IA2DRel{_IA_D,_IA_E}(_IA_D(), _IA_E()), _IA2DRel{_IA_Ei,_IA_D}(_IA_Ei(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Bi}(_IA_Bi(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_L}(_IA_Ai(), _IA_L()), _IA2DRel{_IA_Ei,_IA_Li}(_IA_Ei(), _IA_Li()), _IA2DRel{_IA_D,_IA_L}(_IA_D(), _IA_L()), _IA2DRel{_IA_L,_IA_B}(_IA_L(), _IA_B()), _IA2DRel{_IA_O,_IA_L}(_IA_O(), _IA_L()), _IA2DRel{_IA_Oi,_IA_D}(_IA_Oi(), _IA_D()), _IA2DRel{_IA_D,_IA_Ai}(_IA_D(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_O}(_IA_Oi(), _IA_O()), _IA2DRel{_IA_D,_IA_Li}(_IA_D(), _IA_Li()), _IA2DRel{_IA_Di,_IA_Ei}(_IA_Di(), _IA_Ei()), _IA2DRel{_IA_B,_IA_D}(_IA_B(), _IA_D()), _IA2DRel{_IA_Oi,_IA_Di}(_IA_Oi(), _IA_Di()), _IA2DRel{_IA_A,_IA_O}(_IA_A(), _IA_O()), _IA2DRel{_IA_Ai,_IA_Ei}(_IA_Ai(), _IA_Ei()), _IA2DRel{_IA_D,_IA_Di}(_IA_D(), _IA_Di()), _IA2DRel{_IA_O,_IA_D}(_IA_O(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Ei}(_IA_Bi(), _IA_Ei()), _IA2DRel{_IA_A,_IA_Oi}(_IA_A(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Ei}(_IA_B(), _IA_Ei()), _IA2DRel{_IA_Bi,_IA_B}(_IA_Bi(), _IA_B()), _IA2DRel{_IA_Ai,_IA_E}(_IA_Ai(), _IA_E()), _IA2DRel{_IA_Ai,_RelationId}(_IA_Ai(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Bi}(_IA_Ai(), _IA_Bi()), _IA2DRel{_IA_Oi,_IA_L}(_IA_Oi(), _IA_L()), _IA2DRel{_IA_L,_IA_O}(_IA_L(), _IA_O()), _IA2DRel{_IA_A,_IA_A}(_IA_A(), _IA_A()), _IA2DRel{_IA_Di,_IA_Oi}(_IA_Di(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_A}(_IA_Bi(), _IA_A()), _IA2DRel{_IA_Oi,_RelationId}(_IA_Oi(), _RelationId()), _IA2DRel{_IA_Oi,_IA_E}(_IA_Oi(), _IA_E()), _IA2DRel{_IA_Di,_IA_Ai}(_IA_Di(), _IA_Ai()), _IA2DRel{_IA_A,_IA_Ai}(_IA_A(), _IA_Ai()), _IA2DRel{_IA_E,_RelationId}(_IA_E(), _RelationId()), _IA2DRel{_IA_Li,_IA_D}(_IA_Li(), _IA_D()), _IA2DRel{_IA_E,_IA_Ei}(_IA_E(), _IA_Ei()), _IA2DRel{_IA_B,_IA_A}(_IA_B(), _IA_A()), _IA2DRel{_IA_L,_IA_Ei}(_IA_L(), _IA_Ei()), _IA2DRel{_IA_Ei,_RelationId}(_IA_Ei(), _RelationId()), _IA2DRel{_IA_A,_IA_D}(_IA_A(), _IA_D()), _IA2DRel{_IA_Bi,_IA_E}(_IA_Bi(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Li}(_IA_Oi(), _IA_Li()), _IA2DRel{_IA_D,_IA_A}(_IA_D(), _IA_A()), _IA2DRel{_IA_E,_IA_Li}(_IA_E(), _IA_Li()), _IA2DRel{_IA_E,_IA_B}(_IA_E(), _IA_B()), _IA2DRel{_IA_Li,_IA_A}(_IA_Li(), _IA_A()), _IA2DRel{_IA_Di,_IA_B}(_IA_Di(), _IA_B()), _IA2DRel{_IA_Li,_IA_Li}(_IA_Li(), _IA_Li()), _IA2DRel{_IA_Li,_RelationId}(_IA_Li(), _RelationId()), _IA2DRel{_IA_Ei,_IA_Di}(_IA_Ei(), _IA_Di()), _IA2DRel{_IA_D,_IA_Oi}(_IA_D(), _IA_Oi()), _IA2DRel{_IA_Li,_IA_Ei}(_IA_Li(), _IA_Ei()), _IA2DRel{_IA_Oi,_IA_Oi}(_IA_Oi(), _IA_Oi()), _IA2DRel{_RelationId,_IA_D}(_RelationId(), _IA_D()), _IA2DRel{_IA_B,_IA_L}(_IA_B(), _IA_L()), _IA2DRel{_IA_D,_RelationId}(_IA_D(), _RelationId()), _IA2DRel{_IA_Li,_IA_Ai}(_IA_Li(), _IA_Ai()), _IA2DRel{_RelationId,_IA_E}(_RelationId(), _IA_E()), _IA2DRel{_IA_Bi,_IA_Di}(_IA_Bi(), _IA_Di()), _IA2DRel{_IA_Bi,_IA_Oi}(_IA_Bi(), _IA_Oi()), _IA2DRel{_IA_Di,_IA_A}(_IA_Di(), _IA_A()), _IA2DRel{_IA_Li,_IA_Di}(_IA_Li(), _IA_Di()), _IA2DRel{_IA_L,_IA_Oi}(_IA_L(), _IA_Oi()), _IA2DRel{_IA_D,_IA_Bi}(_IA_D(), _IA_Bi()), _IA2DRel{_RelationId,_IA_B}(_RelationId(), _IA_B()), _IA2DRel{_RelationId,_IA_Ei}(_RelationId(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_O}(_IA_Ai(), _IA_O()), _IA2DRel{_IA_Bi,_IA_D}(_IA_Bi(), _IA_D()), _IA2DRel{_IA_B,_IA_Ai}(_IA_B(), _IA_Ai()), _IA2DRel{_RelationId,_IA_Di}(_RelationId(), _IA_Di()), _IA2DRel{_IA_B,_IA_Li}(_IA_B(), _IA_Li()), _IA2DRel{_IA_Di,_IA_O}(_IA_Di(), _IA_O()), _IA2DRel{_IA_Bi,_IA_L}(_IA_Bi(), _IA_L()), _IA2DRel{_RelationId,_IA_Ai}(_RelationId(), _IA_Ai()), _IA2DRel{_IA_B,_IA_Oi}(_IA_B(), _IA_Oi()), _IA2DRel{_IA_Li,_IA_Bi}(_IA_Li(), _IA_Bi()), _IA2DRel{_IA_L,_IA_Li}(_IA_L(), _IA_Li()), _IA2DRel{_IA_A,_IA_L}(_IA_A(), _IA_L()), _IA2DRel{_IA_Ei,_IA_L}(_IA_Ei(), _IA_L()), _IA2DRel{_IA_Li,_IA_L}(_IA_Li(), _IA_L()), _IA2DRel{_IA_Bi,_IA_Li}(_IA_Bi(), _IA_Li()), _IA2DRel{_IA_B,_IA_Bi}(_IA_B(), _IA_Bi()), _IA2DRel{_IA_D,_IA_O}(_IA_D(), _IA_O()), _IA2DRel{_IA_O,_IA_Oi}(_IA_O(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_Ai}(_IA_Bi(), _IA_Ai()), _IA2DRel{_IA_L,_RelationId}(_IA_L(), _RelationId()), _IA2DRel{_IA_Di,_IA_D}(_IA_Di(), _IA_D()), _IA2DRel{_RelationId,_IA_Bi}(_RelationId(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_Oi}(_IA_Ai(), _IA_Oi()), _IA2DRel{_IA_Bi,_RelationId}(_IA_Bi(), _RelationId()), _IA2DRel{_IA_Di,_RelationId}(_IA_Di(), _RelationId()), _IA2DRel{_IA_Ei,_IA_O}(_IA_Ei(), _IA_O()), _IA2DRel{_IA_B,_IA_O}(_IA_B(), _IA_O()), _IA2DRel{_IA_Ei,_IA_A}(_IA_Ei(), _IA_A()), _IA2DRel{_IA_L,_IA_Bi}(_IA_L(), _IA_Bi()), _IA2DRel{_IA_A,_IA_Bi}(_IA_A(), _IA_Bi()), _IA2DRel{_IA_O,_IA_B}(_IA_O(), _IA_B()), _IA2DRel{_IA_Oi,_IA_B}(_IA_Oi(), _IA_B()), _IA2DRel{_IA_O,_IA_E}(_IA_O(), _IA_E()), _IA2DRel{_IA_Di,_IA_Bi}(_IA_Di(), _IA_Bi()), _IA2DRel{_RelationId,_IA_O}(_RelationId(), _IA_O()), _IA2DRel{_IA_B,_IA_E}(_IA_B(), _IA_E()), _IA2DRel{_IA_B,_IA_B}(_IA_B(), _IA_B()), _IA2DRel{_IA_A,_IA_Di}(_IA_A(), _IA_Di()), _IA2DRel{_IA_O,_IA_Di}(_IA_O(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_Ai}(_IA_Ai(), _IA_Ai()), _IA2DRel{_IA_E,_IA_E}(_IA_E(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Ei}(_IA_Oi(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Ai}(_IA_E(), _IA_Ai()), _IA2DRel{_IA_Li,_IA_E}(_IA_Li(), _IA_E()), _IA2DRel{_IA_O,_RelationId}(_IA_O(), _RelationId()), _IA2DRel{_IA_E,_IA_Di}(_IA_E(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_A}(_IA_Ai(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Bi}(_IA_Ei(), _IA_Bi()), _IA2DRel{_IA_O,_IA_Bi}(_IA_O(), _IA_Bi()), _IA2DRel{_IA_E,_IA_O}(_IA_E(), _IA_O()), _IA2DRel{_IA_Ei,_IA_E}(_IA_Ei(), _IA_E()), _IA2DRel{_IA_Di,_IA_Li}(_IA_Di(), _IA_Li()), _IA2DRel{_IA_L,_IA_D}(_IA_L(), _IA_D()), _IA2DRel{_IA_E,_IA_Oi}(_IA_E(), _IA_Oi()), _IA2DRel{_IA_A,_IA_Li}(_IA_A(), _IA_Li()), _IA2DRel{_IA_O,_IA_O}(_IA_O(), _IA_O()), _IA2DRel{_IA_Li,_IA_Oi}(_IA_Li(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Di}(_IA_B(), _IA_Di()), _IA2DRel{_RelationId,_IA_Li}(_RelationId(), _IA_Li()), _IA2DRel{_IA_L,_IA_Ai}(_IA_L(), _IA_Ai()), _IA2DRel{_IA_E,_IA_A}(_IA_E(), _IA_A()), _IA2DRel{_RelationId,_IA_L}(_RelationId(), _IA_L()), _IA2DRel{_IA_A,_IA_Ei}(_IA_A(), _IA_Ei()), _IA2DRel{_RelationId,_IA_A}(_RelationId(), _IA_A()), _IA2DRel{_IA_E,_IA_L}(_IA_E(), _IA_L()), _IA2DRel{_IA_Bi,_IA_O}(_IA_Bi(), _IA_O()), _IA2DRel{_IA_Di,_IA_L}(_IA_Di(), _IA_L()), _IA2DRel{_IA_Oi,_IA_A}(_IA_Oi(), _IA_A()), _IA2DRel{_IA_D,_IA_D}(_IA_D(), _IA_D()), _IA2DRel{_IA_Ai,_IA_B}(_IA_Ai(), _IA_B()), _IA2DRel{_IA_O,_IA_Li}(_IA_O(), _IA_Li()), _IA2DRel{_IA_Oi,_IA_Bi}(_IA_Oi(), _IA_Bi()), _IA2DRel{_IA_L,_IA_A}(_IA_L(), _IA_A()), _IA2DRel{_IA_B,_RelationId}(_IA_B(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Li}(_IA_Ai(), _IA_Li()), _IA2DRel{_IA_A,_IA_B}(_IA_A(), _IA_B()), _IA2DRel{_IA_Ei,_IA_B}(_IA_Ei(), _IA_B()), _IA2DRel{_IA_Di,_IA_E}(_IA_Di(), _IA_E()), _IA2DRel{_IA_L,_IA_Di}(_IA_L(), _IA_Di()), _IA2DRel{_IA_Ei,_IA_Oi}(_IA_Ei(), _IA_Oi()), _IA2DRel{_IA_Ei,_IA_Ei}(_IA_Ei(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Bi}(_IA_E(), _IA_Bi()), _IA2DRel{_IA_D,_IA_Ei}(_IA_D(), _IA_Ei()), _IA2DRel{_IA_Li,_IA_B}(_IA_Li(), _IA_B()), _IA2DRel{_IA_Ai,_IA_Di}(_IA_Ai(), _IA_Di()), _IA2DRel{_IA_L,_IA_E}(_IA_L(), _IA_E()), _IA2DRel{_IA_A,_RelationId}(_IA_A(), _RelationId()), _IA2DRel{_IA_E,_IA_D}(_IA_E(), _IA_D()), _IA2DRel{_IA_Li,_IA_O}(_IA_Li(), _IA_O()), _IA2DRel{_IA_O,_IA_Ai}(_IA_O(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_Ai}(_IA_Oi(), _IA_Ai()), _IA2DRel{_IA_O,_IA_Ei}(_IA_O(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_D}(_IA_Ai(), _IA_D()), _IA2DRel{_IA_A,_IA_E}(_IA_A(), _IA_E()), _IA2DRel{_IA_Di,_IA_Di}(_IA_Di(), _IA_Di()), _IA2DRel{_IA_D,_IA_B}(_IA_D(), _IA_B())]))
 train size = (1, 1, 384, 200)
  136.606 s (1660742137 allocations: 99.79 GiB)
 test size = (1, 1, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  1  2  0  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  0  0  0  0  1
 0  1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  4  0  0  0  1  0  0  0  0  1  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  2  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  4  0  0  0  0  0  1  0
 0  2  0  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  0  2  0  0  0  0  0  0  3  0  0  0  0  0
 0  1  0  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  0  0  2  0  0  1  0  0  0  0  1  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (97, height: 9)

julia> T = testDataset(datasets[6], timeit, args=args, kwargs=kwargs);                                                            
Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[_IA2DRel{_IA_O,_IA_A}(_IA_O(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Ai}(_IA_Ei(), _IA_Ai()), _IA2DRel{_IA_L,_IA_L}(_IA_L(), _IA_L()), _IA2DRel{_RelationId,_IA_Oi}(_RelationId(), _IA_Oi()), _IA2DRel{_IA_D,_IA_E}(_IA_D(), _IA_E()), _IA2DRel{_IA_Ei,_IA_D}(_IA_Ei(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Bi}(_IA_Bi(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_L}(_IA_Ai(), _IA_L()), _IA2DRel{_IA_Ei,_IA_Li}(_IA_Ei(), _IA_Li()), _IA2DRel{_IA_D,_IA_L}(_IA_D(), _IA_L()), _IA2DRel{_IA_L,_IA_B}(_IA_L(), _IA_B()), _IA2DRel{_IA_O,_IA_L}(_IA_O(), _IA_L()), _IA2DRel{_IA_Oi,_IA_D}(_IA_Oi(), _IA_D()), _IA2DRel{_IA_D,_IA_Ai}(_IA_D(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_O}(_IA_Oi(), _IA_O()), _IA2DRel{_IA_D,_IA_Li}(_IA_D(), _IA_Li()), _IA2DRel{_IA_Di,_IA_Ei}(_IA_Di(), _IA_Ei()), _IA2DRel{_IA_B,_IA_D}(_IA_B(), _IA_D()), _IA2DRel{_IA_Oi,_IA_Di}(_IA_Oi(), _IA_Di()), _IA2DRel{_IA_A,_IA_O}(_IA_A(), _IA_O()), _IA2DRel{_IA_Ai,_IA_Ei}(_IA_Ai(), _IA_Ei()), _IA2DRel{_IA_D,_IA_Di}(_IA_D(), _IA_Di()), _IA2DRel{_IA_O,_IA_D}(_IA_O(), _IA_D()), _IA2DRel{_IA_Bi,_IA_Ei}(_IA_Bi(), _IA_Ei()), _IA2DRel{_IA_A,_IA_Oi}(_IA_A(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Ei}(_IA_B(), _IA_Ei()), _IA2DRel{_IA_Bi,_IA_B}(_IA_Bi(), _IA_B()), _IA2DRel{_IA_Ai,_IA_E}(_IA_Ai(), _IA_E()), _IA2DRel{_IA_Ai,_RelationId}(_IA_Ai(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Bi}(_IA_Ai(), _IA_Bi()), _IA2DRel{_IA_Oi,_IA_L}(_IA_Oi(), _IA_L()), _IA2DRel{_IA_L,_IA_O}(_IA_L(), _IA_O()), _IA2DRel{_IA_A,_IA_A}(_IA_A(), _IA_A()), _IA2DRel{_IA_Di,_IA_Oi}(_IA_Di(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_A}(_IA_Bi(), _IA_A()), _IA2DRel{_IA_Oi,_RelationId}(_IA_Oi(), _RelationId()), _IA2DRel{_IA_Oi,_IA_E}(_IA_Oi(), _IA_E()), _IA2DRel{_IA_Di,_IA_Ai}(_IA_Di(), _IA_Ai()), _IA2DRel{_IA_A,_IA_Ai}(_IA_A(), _IA_Ai()), _IA2DRel{_IA_E,_RelationId}(_IA_E(), _RelationId()), _IA2DRel{_IA_Li,_IA_D}(_IA_Li(), _IA_D()), _IA2DRel{_IA_E,_IA_Ei}(_IA_E(), _IA_Ei()), _IA2DRel{_IA_B,_IA_A}(_IA_B(), _IA_A()), _IA2DRel{_IA_L,_IA_Ei}(_IA_L(), _IA_Ei()), _IA2DRel{_IA_Ei,_RelationId}(_IA_Ei(), _RelationId()), _IA2DRel{_IA_A,_IA_D}(_IA_A(), _IA_D()), _IA2DRel{_IA_Bi,_IA_E}(_IA_Bi(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Li}(_IA_Oi(), _IA_Li()), _IA2DRel{_IA_D,_IA_A}(_IA_D(), _IA_A()), _IA2DRel{_IA_E,_IA_Li}(_IA_E(), _IA_Li()), _IA2DRel{_IA_E,_IA_B}(_IA_E(), _IA_B()), _IA2DRel{_IA_Li,_IA_A}(_IA_Li(), _IA_A()), _IA2DRel{_IA_Di,_IA_B}(_IA_Di(), _IA_B()), _IA2DRel{_IA_Li,_IA_Li}(_IA_Li(), _IA_Li()), _IA2DRel{_IA_Li,_RelationId}(_IA_Li(), _RelationId()), _IA2DRel{_IA_Ei,_IA_Di}(_IA_Ei(), _IA_Di()), _IA2DRel{_IA_D,_IA_Oi}(_IA_D(), _IA_Oi()), _IA2DRel{_IA_Li,_IA_Ei}(_IA_Li(), _IA_Ei()), _IA2DRel{_IA_Oi,_IA_Oi
}(_IA_Oi(), _IA_Oi()), _IA2DRel{_RelationId,_IA_D}(_RelationId(), _IA_D()), _IA2DRel{_IA_B,_IA_L}(_IA_B(), _IA_L()), _IA2DRel{_IA_
D,_RelationId}(_IA_D(), _RelationId()), _IA2DRel{_IA_Li,_IA_Ai}(_IA_Li(), _IA_Ai()), _IA2DRel{_RelationId,_IA_E}(_RelationId(), _I
A_E()), _IA2DRel{_IA_Bi,_IA_Di}(_IA_Bi(), _IA_Di()), _IA2DRel{_IA_Bi,_IA_Oi}(_IA_Bi(), _IA_Oi()), _IA2DRel{_IA_Di,_IA_A}(_IA_Di(),
 _IA_A()), _IA2DRel{_IA_Li,_IA_Di}(_IA_Li(), _IA_Di()), _IA2DRel{_IA_L,_IA_Oi}(_IA_L(), _IA_Oi()), _IA2DRel{_IA_D,_IA_Bi}(_IA_D(),
 _IA_Bi()), _IA2DRel{_RelationId,_IA_B}(_RelationId(), _IA_B()), _IA2DRel{_RelationId,_IA_Ei}(_RelationId(), _IA_Ei()), _IA2DRel{_
IA_Ai,_IA_O}(_IA_Ai(), _IA_O()), _IA2DRel{_IA_Bi,_IA_D}(_IA_Bi(), _IA_D()), _IA2DRel{_IA_B,_IA_Ai}(_IA_B(), _IA_Ai()), _IA2DRel{_R
elationId,_IA_Di}(_RelationId(), _IA_Di()), _IA2DRel{_IA_B,_IA_Li}(_IA_B(), _IA_Li()), _IA2DRel{_IA_Di,_IA_O}(_IA_Di(), _IA_O()), 
_IA2DRel{_IA_Bi,_IA_L}(_IA_Bi(), _IA_L()), _IA2DRel{_RelationId,_IA_Ai}(_RelationId(), _IA_Ai()), _IA2DRel{_IA_B,_IA_Oi}(_IA_B(), 
_IA_Oi()), _IA2DRel{_IA_Li,_IA_Bi}(_IA_Li(), _IA_Bi()), _IA2DRel{_IA_L,_IA_Li}(_IA_L(), _IA_Li()), _IA2DRel{_IA_A,_IA_L}(_IA_A(), 
_IA_L()), _IA2DRel{_IA_Ei,_IA_L}(_IA_Ei(), _IA_L()), _IA2DRel{_IA_Li,_IA_L}(_IA_Li(), _IA_L()), _IA2DRel{_IA_Bi,_IA_Li}(_IA_Bi(), _IA_Li()), _IA2DRel{_IA_B,_IA_Bi}(_IA_B(), _IA_Bi()), _IA2DRel{_IA_D,_IA_O}(_IA_D(), _IA_O()), _IA2DRel{_IA_O,_IA_Oi}(_IA_O(), _IA_Oi()), _IA2DRel{_IA_Bi,_IA_Ai}(_IA_Bi(), _IA_Ai()), _IA2DRel{_IA_L,_RelationId}(_IA_L(), _RelationId()), _IA2DRel{_IA_Di,_IA_D}(_IA_Di(), _IA_D()), _IA2DRel{_RelationId,_IA_Bi}(_RelationId(), _IA_Bi()), _IA2DRel{_IA_Ai,_IA_Oi}(_IA_Ai(), _IA_Oi()), _IA2DRel{_IA_Bi,_RelationId}(_IA_Bi(), _RelationId()), _IA2DRel{_IA_Di,_RelationId}(_IA_Di(), _RelationId()), _IA2DRel{_IA_Ei,_IA_O}(_IA_Ei(), _IA_O()), _IA2DRel{_IA_B,_IA_O}(_IA_B(), _IA_O()), _IA2DRel{_IA_Ei,_IA_A}(_IA_Ei(), _IA_A()), _IA2DRel{_IA_L,_IA_Bi}(_IA_L(), _IA_Bi()), _IA2DRel{_IA_A,_IA_Bi}(_IA_A(), _IA_Bi()), _IA2DRel{_IA_O,_IA_B}(_IA_O(), _IA_B()), _IA2DRel{_IA_Oi,_IA_B}(_IA_Oi(), _IA_B()), _IA2DRel{_IA_O,_IA_E}(_IA_O(), _IA_E()), _IA2DRel{_IA_Di,_IA_Bi}(_IA_Di(), _IA_Bi()), _IA2DRel{_RelationId,_IA_O}(_RelationId(), _IA_O()), _IA2DRel{_IA_B,_IA_E}(_IA_B(), _IA_E()), _IA2DRel{_IA_B,_IA_B}(_IA_B(), _IA_B()), _IA2DRel{_IA_A,_IA_Di}(_IA_A(), _IA_Di()), _IA2DRel{_IA_O,_IA_Di}(_IA_O(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_Ai}(_IA_Ai(), _IA_Ai()), _IA2DRel{_IA_E,_IA_E}(_IA_E(), _IA_E()), _IA2DRel{_IA_Oi,_IA_Ei}(_IA_Oi(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Ai}(_IA_E(), _IA_Ai()), _IA2DRel{_IA_Li,_IA_E}(_IA_Li(), _IA_E()), _IA2DRel{_IA_O,_RelationId}(_IA_O(), _RelationId()), _IA2DRel{_IA_E,_IA_Di}(_IA_E(), _IA_Di()), _IA2DRel{_IA_Ai,_IA_A}(_IA_Ai(), _IA_A()), _IA2DRel{_IA_Ei,_IA_Bi}(_IA_Ei(), _IA_Bi()), _IA2DRel{_IA_O,_IA_Bi}(_IA_O(), _IA_Bi()), _IA2DRel{_IA_E,_IA_O}(_IA_E(), _IA_O()), _IA2DRel{_IA_Ei,_IA_E}(_IA_Ei(), _IA_E()), _IA2DRel{_IA_Di,_IA_Li}(_IA_Di(), _IA_Li()), _IA2DRel{_IA_L,_IA_D}(_IA_L(), _IA_D()), _IA2DRel{_IA_E,_IA_Oi}(_IA_E(), _IA_Oi()), _IA2DRel{_IA_A,_IA_Li}(_IA_A(), _IA_Li()), _IA2DRel{_IA_O,_IA_O}(_IA_O(), _IA_O()), _IA2DRel{_IA_Li,_IA_Oi}(_IA_Li(), _IA_Oi()), _IA2DRel{_IA_B,_IA_Di}(_IA_B(), _IA_Di()), _IA2DRel{_RelationId,_IA_Li}(_RelationId(), _IA_Li()), _IA2DRel{_IA_L,_IA_Ai}(_IA_L(), _IA_Ai()), _IA2DRel{_IA_E,_IA_A}(_IA_E(), _IA_A()), _IA2DRel{_RelationId,_IA_L}(_RelationId(), _IA_L()), _IA2DRel{_IA_A,_IA_Ei}(_IA_A(), _IA_Ei()), _IA2DRel{_RelationId,_IA_A}(_RelationId(), _IA_A()), _IA2DRel{_IA_E,_IA_L}(_IA_E(), _IA_L()), _IA2DRel{_IA_Bi,_IA_O}(_IA_Bi(), _IA_O()), _IA2DRel{_IA_Di,_IA_L}(_IA_Di(), _IA_L()), _IA2DRel{_IA_Oi,_IA_A}(_IA_Oi(), _IA_A()), _IA2DRel{_IA_D,_IA_D}(_IA_D(), _IA_D()), _IA2DRel{_IA_Ai,_IA_B}(_IA_Ai(), _IA_B()), _IA2DRel{_IA_O,_IA_Li}(_IA_O(), _IA_Li()), _IA2DRel{_IA_Oi,_IA_Bi}(_IA_Oi(), _IA_Bi()), _IA2DRel{_IA_L,_IA_A}(_IA_L(), _IA_A()), _IA2DRel{_IA_B,_RelationId}(_IA_B(), _RelationId()), _IA2DRel{_IA_Ai,_IA_Li}(_IA_Ai(), _IA_Li()), _IA2DRel{_IA_A,_IA_B}(_IA_A(), _IA_B()), _IA2DRel{_IA_Ei,_IA_B}(_IA_Ei(), _IA_B()), _IA2DRel{_IA_Di,_IA_E}(_IA_Di(), _IA_E()), _IA2DRel{_IA_L,_IA_Di}(_IA_L(), _IA_Di()), _IA2DRel{_IA_Ei,_IA_Oi}(_IA_Ei(), _IA_Oi()), _IA2DRel{_IA_Ei,_IA_Ei}(_IA_Ei(), _IA_Ei()), _IA2DRel{_IA_E,_IA_Bi}(_IA_E(), _IA_Bi()), _IA2DRel{_IA_D,_IA_Ei}(_IA_D(), _IA_Ei()), _IA2DRel{_IA_Li,_IA_B}(_IA_Li(), _IA_B()), _IA2DRel{_IA_Ai,_IA_Di}(_IA_Ai(), _IA_Di()), _IA2DRel{_IA_L,_IA_E}(_IA_L(), _IA_E()), _IA2DRel{_IA_A,_RelationId}(_IA_A(), _RelationId()), _IA2DRel{_IA_E,_IA_D}(_IA_E(), _IA_D()), _IA2DRel{_IA_Li,_IA_O}(_IA_Li(), _IA_O()), _IA2DRel{_IA_O,_IA_Ai}(_IA_O(), _IA_Ai()), _IA2DRel{_IA_Oi,_IA_Ai}(_IA_Oi(), _IA_Ai()), _IA2DRel{_IA_O,_IA_Ei}(_IA_O(), _IA_Ei()), _IA2DRel{_IA_Ai,_IA_D}(_IA_Ai(), _IA_D()), _IA2DRel{_IA_A,_IA_E}(_IA_A(), _IA_E()), _IA2DRel{_IA_Di,_IA_Di}(_IA_Di(), _IA_Di()), _IA2DRel{_IA_D,_IA_B}(_IA_D(), _IA_B())]))
 train size = (3, 3, 384, 200)
  418.916 s (2366860732 allocations: 142.86 GiB)
run(`say 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'`)
 test size = (3, 3, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 6  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 0  2  1  2  0  0  0  0  0  0  0  1  0  0  0  0
 0  0  3  0  0  0  0  0  0  0  3  0  0  0  0  0
 0  0  0  3  2  0  0  0  0  0  0  1  0  0  0  0
 0  0  0  0  5  0  0  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  6  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  1  5  0  0  0  0  0  0  0  0
 0  0  0  0  2  0  0  0  4  0  0  0  0  0  0  0
 0  0  3  1  0  0  0  0  0  1  0  1  0  0  0  0
 0  1  2  0  1  0  0  0  0  0  2  0  0  0  0  0
 0  1  2  0  0  0  0  0  0  0  1  2  0  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  5  0  0  0
 0  0  0  0  1  0  0  0  0  0  0  0  0  4  1  0
 0  0  0  0  0  0  0  0  0  0  0  0  2  2  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (79, height: 9)



Introduced Sogliole



julia> T = testDataset(datasets[1], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'PaviaDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = On
tology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._To
poRel[<DC>
, <TPP>
, <PO>
, <EC>
, <TPPi>
, <NTPPi>
, <NTPP>
]))
  11.815 s (104596944 allocations: 5.90 GiB)
 test size = (1, 1, 54, 103)
 Purity threshold 1.0
  acc: 68.52% kappa: 64.58% 9×9 Array{Int64,2}:
 4  0  0  0  0  0  2  0  0
 0  2  1  1  0  2  0  0  0
 0  1  2  0  0  0  0  3  0
 0  2  0  4  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  2  1  0  2  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
nodes: (51, height: 9)

julia> T = testDataset(datasets[3], timeit, args=args, kwargs=kwargs);                                                            
Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[<DC>
, <TPP>
, <PO>
, <EC>
, <TPPi>
, <NTPPi>
, <NTPP>
]))
 train size = (3, 3, 216, 103)
  61.170 s (361000351 allocations: 22.18 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 70.37% kappa: 66.67% 9×9 Array{Int64,2}:
 4  0  0  0  0  2  0  0  0
 0  3  0  0  0  2  0  1  0
 0  0  4  0  0  0  1  1  0
 0  0  0  6  0  0  0  0  0
 0  0  2  0  4  0  0  0  0
 0  2  0  0  0  4  0  0  0
 2  0  0  0  0  0  4  0  0
 0  0  3  0  0  0  0  3  0
 0  0  0  0  0  0  0  0  6
nodes: (45, height: 7)

julia> T = testDataset(datasets[4], timeit, args=args, kwargs=kwargs);                                                            
Benchmarking dataset 'IndianPinesCorrectedDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._TopoRel[<DC>
, <TPP>
, <PO>
, <EC>
, <TPPi>
, <NTPPi>
, <NTPP>
]))
 train size = (1, 1, 384, 200)
  54.560 s (428530079 allocations: 24.12 GiB)
 test size = (1, 1, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  1  2  0  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  0  0  0  0  1
 0  1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  4  0  0  0  1  0  0  0  0  1  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  2  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  4  0  0  0  0  0  1  0
 0  2  0  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  0  2  0  0  0  0  0  0  3  0  0  0  0  0
 0  1  0  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  0  0  2  0  0  1  0  0  0  0  1  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (97, height: 9)

julia> T = testDataset(datasets[6], timeit, args=args, kwargs=kwargs);                                                            
Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.Moda
lLogic._TopoRel[<DC>
, <TPP>
, <PO>
, <EC>
, <TPPi>
, <NTPPi>
, <NTPP>
]))
 train size = (3, 3, 384, 200)
 Purity threshold 1.037 allocations: 236.91 GiB)
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
 0  4  1  0  0  0  0  0  0  1  0  0  0  0  0  0
 0  2  3  1  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  2  0  0  0  0  0  1  2  1  0  0  0  0  0
 0  0  0  1  5  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  5  0  0  0  0  0  0  0  0  1  0
 0  0  0  0  0  0  6  0  0  0  0  0  0  0  0  0
 1  0  0  0  0  0  1  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  0  0  6  0  0  0  0  0  0  0
 0  1  0  0  0  0  0  0  0  4  1  0  0  0  0  0
 0  1  1  1  0  0  0  0  0  0  1  2  0  0  0  0
 0  1  3  1  0  0  0  0  0  0  0  1  0  0  0  0
 0  0  0  1  1  0  0  0  0  0  0  0  4  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  5  1  0
 0  0  0  0  0  0  1  0  0  0  0  0  0  2  3  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (81, height: 8)

julia> kwargs = (                                                     
         initCondition=DecisionTree.startAtCenter,                    
         # initCondition=DecisionTree.startWithRelationAll,           
         ontology=getIntervalOntologyOfDim(Val(2))                    
         # ontology=getIntervalTopologicalOntologyOfDim(Val(2)),      
         # test_operators=[ModalLogic.TestOpLes],                     
         # test_operators=[ModalLogic.TestOpGeq],                     
       )                                                              
(initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[<Ai,B>
, <E,D>
, <D,D>
, <E,Id>
, <Bi,Ai>
, <A,E>
, <B,D>
, <A,A>
, <E,Li>
, <Di,O>
  …  <Ei,D>
, <B,E>
, <A,O>
, <B,Bi>
, <A,Id>
, <D,Li>
, <Ai,Id>
, <Li,Di>
, <Ei,Di>
, <Di,Oi>
]))

julia> T = testDataset(datasets[1], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'PaviaDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[<Ai,B>
, <E,D>
, <D,D>
, <E,Id>
, <Bi,Ai>
, <A,E>
, <B,D>
, <A,A>
, <E,Li>
, <Di,O>
, <Oi,B>
, <L,A>
, <L,Li>
, <Ei,Bi>
, <Ei,L>
, <L,Di>
, <Bi,Ei>
, <L,Oi>
, <Ei,Li>
, <Di,Ei>
, <A,Ai>
, <Oi,Oi>
, <E,Bi>
, <L,B>
, <B,Ei>
, <Id,A>
, <O,B>
, <Ei,O>
, <Oi,A>
, <Di,Ai>
, <Oi,Li>
, <Di,Bi>
, <Ei,Oi>
, <Bi,A>
, <D,Id>
, <E,Di>
, <B,Id>
, <Id,B>
, <Id,L>
, <E,A>
, <Li,D>
, <O,E>
, <A,Bi>
, <Ei,Id>
, <B,Di>
, <Oi,Bi>
, <A,D>
, <Id,E>
, <L,Ai>
, <Id,O>
, <L,Bi>
, <A,Ei>
, <D,Bi>
, <Oi,Ei>
, <B,L>
, <A,Li>
, <Id,Ei>
, <Id,Li>
, <D,Oi>
, <D,A>
, <Ai,L>
, <Ai,Ei>
, <O,L>
, <O,Li>
, <D,B>
, <Li,B>
, <Bi,B>
, <D,L>
, <O,A>
, <Bi,Bi>
, <Di,Id>
, <O,D>
, <Oi,O>
, <O,Ei>
, <Di,D>
, <Bi,Li>
, <Id,Ai>
, <L,O>
, <D,Ei>
, <Ai,Di>
, <Id,Bi>
, <E,Ai>
, <O,O>
, <Ai,Ai>
, <D,Ai>
, <Bi,D>
, <Oi,D>
, <B,B>
, <Li,O>
, <O,Oi>
, <A,L>
, <L,L>
, <A,Di>
, <B,Ai>
, <Ai,E>
, <O,Bi>
, <Li,Id>
, <Ei,Ai>
, <A,Oi>
, <Bi,E>
, <Di,A>
, <O,Ai>
, <Oi,E>
, <Di,Di>
, <L,Ei>
, <E,O>
, <Ai,Bi>
, <Di,L>
, <Id,Di>
, <L,D>
, <D,Di>
, <B,A>
, <Ei,A>
, <Oi,Id>
, <D,E>
, <Id,Oi>
, <Id,D>
, <Bi,Oi>
, <Di,E>
, <Bi,Id>
, <L,E>
, <Li,E>
, <O,Id>
, <Di,B>
, <O,Di>
, <E,L>
, <Ai,O>
, <Ai,Oi>
, <B,O>
, <Ai,D>
, <B,Li>
, <E,B>
, <A,B>
, <Ai,A>
, <Li,Ei>
, <Ei,Ei>
, <Di,Li>
, <Li,Li>
, <Li,Bi>
, <Li,A>
, <Oi,L>
, <D,O>
, <E,Oi>
, <Bi,Di>
, <L,Id>
, <Ei,B>
, <Li,Oi>
, <E,E>
, <Oi,Di>
, <Li,Ai>
, <B,Oi>
, <Li,L>
, <Ai,Li>
, <E,Ei>
, <Ei,E>
, <Oi,Ai>
, <Bi,O>
, <Bi,L>
, <Ei,D>
, <B,E>
, <A,O>
, <B,Bi>
, <A,Id>
, <D,Li>
, <Ai,Id>
, <Li,Di>
, <Ei,Di>
, <Di,Oi>
]))
 train size = (1, 1, 216, 103)
  37.532 s (403766292 allocations: 24.37 GiB)
 test size = (1, 1, 54, 103)
 Purity threshold 1.0
  acc: 68.52% kappa: 64.58% 9×9 Array{Int64,2}:
 4  0  0  0  0  0  2  0  0
 0  2  1  1  0  2  0  0  0
 0  1  2  0  0  0  0  3  0
 0  2  0  4  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  2  1  0  2  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
nodes: (51, height: 9)

julia> T = testDataset(datasets[3], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[<Ai,B>
, <E,D>
, <D,D>
, <E,Id>
, <Bi,Ai>
, <A,E>
, <B,D>
, <A,A>
, <E,Li>
, <Di,O>
, <Oi,B>
, <L,A>
, <L,Li>
, <Ei,Bi>
, <Ei,L>
, <L,Di>
, <Bi,Ei>
, <L,Oi>
, <Ei,Li>
, <Di,Ei>
, <A,Ai>
, <Oi,Oi>
, <E,Bi>
, <L,B>
, <B,Ei>
, <Id,A>
, <O,B>
, <Ei,O>
, <Oi,A>
, <Di,Ai>
, <Oi,Li>
, <Di,Bi>
, <Ei,Oi>
, <Bi,A>
, <D,Id>
, <E,Di>
, <B,Id>
, <Id,B>
, <Id,L>
, <E,A>
, <Li,D>
, <O,E>
, <A,Bi>
, <Ei,Id>
, <B,Di>
, <Oi,Bi>
, <A,D>
, <Id,E>
, <L,Ai>
, <Id,O>
, <L,Bi>
, <A,Ei>
, <D,Bi>
, <Oi,Ei>
, <B,L>
, <A,Li>
, <Id,Ei>
, <Id,Li>
, <D,Oi>
, <D,A>
, <Ai,L>
, <Ai,Ei>
, <O,L>
, <O,Li>
, <D,B>
, <Li,B>
, <Bi,B>
, <D,L>
, <O,A>
, <Bi,Bi>
, <Di,Id>
, <O,D>
, <Oi,O>
, <O,Ei>
, <Di,D>
, <Bi,Li>
, <Id,Ai>
, <L,O>
, <D,Ei>
, <Ai,Di>
, <Id,Bi>
, <E,Ai>
, <O,O>
, <Ai,Ai>
, <D,Ai>
, <Bi,D>
, <Oi,D>
, <B,B>
, <Li,O>
, <O,Oi>
, <A,L>
, <L,L>
, <A,Di>
, <B,Ai>
, <Ai,E>
, <O,Bi>
, <Li,Id>
, <Ei,Ai>
, <A,Oi>
, <Bi,E>
, <Di,A>
, <O,Ai>
, <Oi,E>
, <Di,Di>
, <L,Ei>
, <E,O>
, <Ai,Bi>
, <Di,L>
, <Id,Di>
, <L,D>
, <D,Di>
, <B,A>
, <Ei,A>
, <Oi,Id>
, <D,E>
, <Id,Oi>
, <Id,D>
, <Bi,Oi>
, <Di,E>
, <Bi,Id>
, <L,E>
, <Li,E>
, <O,Id>
, <Di,B>
, <O,Di>
, <E,L>
, <Ai,O>
, <Ai,Oi>
, <B,O>
, <Ai,D>
, <B,Li>
, <E,B>
, <A,B>
, <Ai,A>
, <Li,Ei>
, <Ei,Ei>
, <Di,Li>
, <Li,Li>
, <Li,Bi>
, <Li,A>
, <Oi,L>
, <D,O>
, <E,Oi>
, <Bi,Di>
, <L,Id>
, <Ei,B>
, <Li,Oi>
, <E,E>
, <Oi,Di>
, <Li,Ai>
, <B,Oi>
, <Li,L>
, <Ai,Li>
, <E,Ei>
, <Ei,E>
, <Oi,Ai>
, <Bi,O>
, <Bi,L>
, <Ei,D>
, <B,E>
, <A,O>
, <B,Bi>
, <A,Id>
, <D,Li>
, <Ai,Id>
, <Li,Di>
, <Ei,Di>
, <Di,Oi>
]))
 train size = (3, 3, 216, 103)
  111.135 s (429434301 allocations: 28.12 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 75.93% kappa: 72.92% 9×9 Array{Int64,2}:
 5  0  1  0  0  0  0  0  0
 0  5  0  0  0  1  0  0  0
 0  0  4  0  0  2  0  0  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  3  1  1  1  0
 0  2  0  0  0  4  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  2  0  0  2  0  2  0
 0  0  0  0  0  0  0  0  6
nodes: (37, height: 7)

julia> T = testDataset(datasets[4], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'IndianPinesCorrectedDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[<Ai,B>
, <E,D>
, <D,D>
, <E,Id>
, <Bi,Ai>
, <A,E>
, <B,D>
, <A,A>
, <E,Li>
, <Di,O>
, <Oi,B>
, <L,A>
, <L,Li>
, <Ei,Bi>
, <Ei,L>
, <L,Di>
, <Bi,Ei>
, <L,Oi>
, <Ei,Li>
, <Di,Ei>
, <A,Ai>
, <Oi,Oi>
, <E,Bi>
, <L,B>
, <B,Ei>
, <Id,A>
, <O,B>
, <Ei,O>
, <Oi,A>
, <Di,Ai>
, <Oi,Li>
, <Di,Bi>
, <Ei,Oi>
, <Bi,A>
, <D,Id>
, <E,Di>
, <B,Id>
, <Id,B>
, <Id,L>
, <E,A>
, <Li,D>
, <O,E>
, <A,Bi>
, <Ei,Id>
, <B,Di>
, <Oi,Bi>
, <A,D>
, <Id,E>
, <L,Ai>
, <Id,O>
, <L,Bi>
, <A,Ei>
, <D,Bi>
, <Oi,Ei>
, <B,L>
, <A,Li>
, <Id,Ei>
, <Id,Li>
, <D,Oi>
, <D,A>
, <Ai,L>
, <Ai,Ei>
, <O,L>
, <O,Li>
, <D,B>
, <Li,B>
, <Bi,B>
, <D,L>
, <O,A>
, <Bi,Bi>
, <Di,Id>
, <O,D>
, <Oi,O>
, <O,Ei>
, <Di,D>
, <Bi,Li>
, <Id,Ai>
, <L,O>
, <D,Ei>
, <Ai,Di>
, <Id,Bi>
, <E,Ai>
, <O,O>
, <Ai,Ai>
, <D,Ai>
, <Bi,D>
, <Oi,D>
, <B,B>
, <Li,O>
, <O,Oi>
, <A,L>
, <L,L>
, <A,Di>
, <B,Ai>
, <Ai,E>
, <O,Bi>
, <Li,Id>
, <Ei,Ai>
, <A,Oi>
, <Bi,E>
, <Di,A>
, <O,Ai>
, <Oi,E>
, <Di,Di>
, <L,Ei>
, <E,O>
, <Ai,Bi>
, <Di,L>
, <Id,Di>
, <L,D>
, <D,Di>
, <B,A>
, <Ei,A>
, <Oi,Id>
, <D,E>
, <Id,Oi>
, <Id,D>
, <Bi,Oi>
, <Di,E>
, <Bi,Id>
, <L,E>
, <Li,E>
, <O,Id>
, <Di,B>
, <O,Di>
, <E,L>
, <Ai,O>
, <Ai,Oi>
, <B,O>
, <Ai,D>
, <B,Li>
, <E,B>
, <A,B>
, <Ai,A>
, <Li,Ei>
, <Ei,Ei>
, <Di,Li>
, <Li,Li>
, <Li,Bi>
, <Li,A>
, <Oi,L>
, <D,O>
, <E,Oi>
, <Bi,Di>
, <L,Id>
, <Ei,B>
, <Li,Oi>
, <E,E>
, <Oi,Di>
, <Li,Ai>
, <B,Oi>
, <Li,L>
, <Ai,Li>
, <E,Ei>
, <Ei,E>
, <Oi,Ai>
, <Bi,O>
, <Bi,L>
, <Ei,D>
, <B,E>
, <A,O>
, <B,Bi>
, <A,Id>
, <D,Li>
, <Ai,Id>
, <Li,Di>
, <Ei,Di>
, <Di,Oi>
]))
 train size = (1, 1, 384, 200)
  182.270 s (1651416143 allocations: 99.49 GiB)
 test size = (1, 1, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  1  2  0  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  0  0  0  0  1
 0  1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  4  0  0  0  1  0  0  0  0  1  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  2  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  4  0  0  0  0  0  1  0
 0  2  0  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  0  2  0  0  0  0  0  0  3  0  0  0  0  0
 0  1  0  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  0  0  2  0  0  1  0  0  0  0  1  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (97, height: 9)

julia> T = testDataset(datasets[6], timeit, args=args, kwargs=kwargs);
                                                                      
Benchmarking dataset 'IndianPinesCorrectedDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D, DecisionTree.ModalLogic._IA2DRel[<Ai,B>
, <E,D>
, <D,D>
, <E,Id>
, <Bi,Ai>
, <A,E>
, <B,D>
, <A,A>
, <E,Li>
, <Di,O>
, <Oi,B>
, <L,A>
, <L,Li>
, <Ei,Bi>
, <Ei,L>
, <L,Di>
, <Bi,Ei>
, <L,Oi>
, <Ei,Li>
, <Di,Ei>
, <A,Ai>
, <Oi,Oi>
, <E,Bi>
, <L,B>
, <B,Ei>
, <Id,A>
, <O,B>
, <Ei,O>
, <Oi,A>
, <Di,Ai>
, <Oi,Li>
, <Di,Bi>
, <Ei,Oi>
, <Bi,A>
, <D,Id>
, <E,Di>
, <B,Id>
, <Id,B>
, <Id,L>
, <E,A>
, <Li,D>
, <O,E>
, <A,Bi>
, <Ei,Id>
, <B,Di>
, <Oi,Bi>
, <A,D>
, <Id,E>
, <L,Ai>
, <Id,O>
, <L,Bi>
, <A,Ei>
, <D,Bi>
, <Oi,Ei>
, <B,L>
, <A,Li>
, <Id,Ei>
, <Id,Li>
, <D,Oi>
, <D,A>
, <Ai,L>
, <Ai,Ei>
, <O,L>
, <O,Li>
, <D,B>
, <Li,B>
, <Bi,B>
, <D,L>
, <O,A>
, <Bi,Bi>
, <Di,Id>
, <O,D>
, <Oi,O>
, <O,Ei>
, <Di,D>
, <Bi,Li>
, <Id,Ai>
, <L,O>
, <D,Ei>
, <Ai,Di>
, <Id,Bi>
, <E,Ai>
, <O,O>
, <Ai,Ai>
, <D,Ai>
, <Bi,D>
, <Oi,D>
, <B,B>
, <Li,O>
, <O,Oi>
, <A,L>
, <L,L>
, <A,Di>
, <B,Ai>
, <Ai,E>
, <O,Bi>
, <Li,Id>
, <Ei,Ai>
, <A,Oi>
, <Bi,E>
, <Di,A>
, <O,Ai>
, <Oi,E>
, <Di,Di>
, <L,Ei>
, <E,O>
, <Ai,Bi>
, <Di,L>
, <Id,Di>
, <L,D>
, <D,Di>
, <B,A>
, <Ei,A>
, <Oi,Id>
, <D,E>
, <Id,Oi>
, <Id,D>
, <Bi,Oi>
, <Di,E>
, <Bi,Id>
, <L,E>
, <Li,E>
, <O,Id>
, <Di,B>
, <O,Di>
, <E,L>
, <Ai,O>
, <Ai,Oi>
, <B,O>
, <Ai,D>
, <B,Li>
, <E,B>
, <A,B>
, <Ai,A>
, <Li,Ei>
, <Ei,Ei>
, <Di,Li>
, <Li,Li>
, <Li,Bi>
, <Li,A>
, <Oi,L>
, <D,O>
, <E,Oi>
, <Bi,Di>
, <L,Id>
, <Ei,B>
, <Li,Oi>
, <E,E>
, <Oi,Di>
, <Li,Ai>
, <B,Oi>
, <Li,L>
, <Ai,Li>
, <E,Ei>
, <Ei,E>
, <Oi,Ai>
, <Bi,O>
, <Bi,L>
, <Ei,D>
, <B,E>
, <A,O>
, <B,Bi>
, <A,Id>
, <D,Li>
, <Ai,Id>
, <Li,Di>
, <Ei,Di>
, <Di,Oi>
]))
 train size = (3, 3, 384, 200)
 
 test size = (3, 3, 96, 200)


removed semiM** trickery

add compact Sogliole


...

Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations))
 train size = (3, 3, 216, 103)
Computing Sogliole...
feature 1/103
...
  342.459 s (1715937983 allocations: 96.61 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 70.37% kappa: 66.67% 9×9 Array{Int64,2}:
 4  0  0  0  0  2  0  0  0
 0  3  0  0  0  2  0  1  0
 0  0  4  0  0  0  1  1  0
 0  0  0  6  0  0  0  0  0
 0  0  2  0  4  0  0  0  0
 0  2  0  0  0  4  0  0  0
 2  0  0  0  0  0  4  0  0
 0  0  3  0  0  0  0  3  0
 0  0  0  0  0  0  0  0  6
nodes: (45, height: 7)

Improved peaks computation for intervals!!

Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations))
 train size = (3, 3, 216, 103)
   147.190 s (1340311200 allocations: 60.23 GiB)
Computing Sogliole...
feature 1/103
feature 2/103
feature 3/103
feature 4/103
feature 5/103
feature 6/103
feature 7/103
feature 8/103
feature 9/103
feature 10/103
feature 11/103
feature 12/103
feature 13/103
feature 14/103
feature 15/103
feature 16/103
feature 17/103
feature 18/103
feature 19/103
feature 20/103
feature 21/103
feature 22/103
feature 23/103
feature 24/103
feature 25/103
feature 26/103
feature 27/103
feature 28/103
feature 29/103
feature 30/103
feature 31/103
feature 32/103
feature 33/103
feature 34/103
feature 35/103
feature 36/103
feature 37/103
feature 38/103
feature 39/103
feature 40/103
feature 41/103
feature 42/103
feature 43/103
feature 44/103
feature 45/103
feature 46/103
feature 47/103
feature 48/103
feature 49/103
feature 50/103
feature 51/103
feature 52/103
feature 53/103
feature 54/103
feature 55/103
feature 56/103
feature 57/103
feature 58/103
feature 59/103
feature 60/103
feature 61/103
feature 62/103
feature 63/103
feature 64/103
feature 65/103
feature 66/103
feature 67/103
feature 68/103
feature 69/103
feature 70/103
feature 71/103
feature 72/103
feature 73/103
feature 74/103
feature 75/103
feature 76/103
feature 77/103
feature 78/103
feature 79/103
feature 80/103
feature 81/103
feature 82/103
feature 83/103
feature 84/103
feature 85/103
feature 86/103
feature 87/103
feature 88/103
feature 89/103
feature 90/103
feature 91/103
feature 92/103
feature 93/103
feature 94/103
feature 95/103
feature 96/103
feature 97/103
feature 98/103
feature 99/103
feature 100/103
feature 101/103
feature 102/103
feature 103/103
Split 216 samples: V101 >= 1620 (purity -342.65269531467914)
Split 74 samples: <NTPPi> (V4 >= 433) (purity -41.66827205358601)
Split 50 samples: V82 >= 1349 (purity -22.165334573404326)
Split 25 samples: V98 >= 990 (purity -6.792914443351853)
Split 21 samples: V1 >= 925 (purity -2.249340578475233)
Split 25 samples: <TPP> (V14 >= 1318) (purity -4.1588830833596715)
Split 142 samples: V10 >= 929 (purity -168.43838216079934)
Split 67 samples: <EC> (V101 >= 3217) (purity -38.50317503588948)
Split 39 samples: <NTPPi> (V52 >= 669) (purity -19.714732844920228)
Split 30 samples: <TPP> (V3 >= 827) (purity -14.187472778141352)
Split 14 samples: V1 >= 337 (purity -2.249340578475233)
Split 16 samples: <DC> (V7 >= 791) (purity -7.32737598268409)
Split 9 samples: <DC> (V1 >= 1096) (purity -2.249340578475233)
Split 28 samples: <TPPi> (V8 >= 406) (purity -8.024143006494441)
Split 13 samples: <DC> (V1 >= 946) (purity -0.0)
Split 75 samples: <EC> (V98 >= 2469) (purity -45.172375915351275)
Split 46 samples: <EC> (V18 >= 1602) (purity -23.03052620556179)
Split 28 samples: <EC> (V6 >= 1353) (purity -6.984466156968949)
Split 8 samples: V1 >= 1233 (purity -2.249340578475233)
Split 20 samples: <DC> (V1 >= 1390) (purity -2.249340578475233)
Split 18 samples: <TPPi> (V4 >= 1541) (purity -2.772588722239781)
Split 29 samples: V1 >= 1959 (purity -0.0)
Decision Tree
Leaves: 23
Tot nodes: 45
Height: 7
Modal height:  5
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
V101 >= 1620
✔ V10 >= 929
│✔ <EC> (V98 >= 2469)
││✔ V1 >= 1959
│││✔ 5 : 24/24
│││✘ 6 : 5/5
││✘ <EC> (V18 >= 1602)
││ ✔ <TPPi> (V4 >= 1541)
││ │✔ 3 : 2/4
││ │✘ 8 : 14/14
││ ✘ <EC> (V6 >= 1353)
││  ✔ <DC> (V1 >= 1390)
││  │✔ 3 : 16/16
││  │✘ 3 : 3/4
││  ✘ V1 >= 1233
││   ✔ 8 : 4/4
││   ✘ 8 : 3/4
│✘ <EC> (V101 >= 3217)
│ ✔ <TPPi> (V8 >= 406)
│ │✔ 4 : 15/15
│ │✘ <DC> (V1 >= 946)
│ │ ✔ 2 : 4/4
│ │ ✘ 4 : 9/9
│ ✘ <NTPPi> (V52 >= 669)
│  ✔ <TPP> (V3 >= 827)
│  │✔ <DC> (V7 >= 791)
│  ││✔ 6 : 5/7
│  ││✘ <DC> (V1 >= 1096)
│  ││ ✔ 2 : 3/4
│  ││ ✘ 2 : 5/5
│  │✘ V1 >= 337
│  │ ✔ 6 : 10/10
│  │ ✘ 6 : 3/4
│  ✘ 2 : 9/9
✘ <NTPPi> (V4 >= 433)
 ✔ V82 >= 1349
 │✔ <TPP> (V14 >= 1318)
 ││✔ 7 : 21/21
 ││✘ 1 : 2/4
 │✘ V98 >= 990
 │ ✔ V1 >= 925
 │ │✔ 1 : 3/4
 │ │✘ 1 : 17/17
 │ ✘ 7 : 2/4
 ✘ 9 : 24/24
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 70.37% kappa: 66.67% 9×9 Array{Int64,2}:
 4  0  0  0  0  2  0  0  0
 0  3  0  0  0  2  0  1  0
 0  0  4  0  0  0  1  1  0
 0  0  0  6  0  0  0  0  0
 0  0  2  0  4  0  0  0  0
 0  2  0  0  0  4  0  0  0
 2  0  0  0  0  0  4  0  0
 0  0  3  0  0  0  0  3  0
 0  0  0  0  0  0  0  0  6
nodes: (45, height: 7)




Benchmarking dataset 'PaviaDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations))
 train size = (1, 1, 216, 103)
  6.391 s (25118254 allocations: 1.34 GiB)
Split 216 samples: V103 >= 1649 (purity -348.87566080751503)
Split 77 samples: V7 >= 568 (purity -52.333710117081516)
Split 53 samples: V91 >= 1352 (purity -36.63478350074642)
Split 38 samples: V85 >= 1565 (purity -27.484529081644222)
Split 29 samples: V19 >= 1308 (purity -8.972413788244452)
Split 13 samples: V102 >= 1459 (purity -4.4986811569504646)
Split 8 samples: V1 >= 1045 (purity -2.772588722239781)
Split 9 samples: V7 >= 1284 (purity -6.660895201050611)
Split 139 samples: V7 >= 981 (purity -159.30789920316084)
Split 70 samples: V69 >= 912 (purity -43.127131839182695)
Split 49 samples: V85 >= 2765 (purity -31.728297512845902)
Split 37 samples: V5 >= 450 (purity -19.874763985767828)
Split 32 samples: V5 >= 534 (purity -15.74617438943)
Split 23 samples: V4 >= 710 (purity -13.665643986772672)
Split 13 samples: V30 >= 801 (purity -6.18265418937591)
Split 9 samples: V1 >= 924 (purity -4.7513526961661725)
Split 10 samples: V3 >= 810 (purity -2.77258872223978)
Split 12 samples: V10 >= 407 (purity -3.3650583350462817)
Split 69 samples: V1 >= 2140 (purity -37.88250524109425)
Split 45 samples: V72 >= 2184 (purity -30.885984848614996)
Split 41 samples: V101 >= 1686 (purity -22.501935388303036)
Split 35 samples: V69 >= 1832 (purity -17.308674177249028)
Split 25 samples: V32 >= 1725 (purity -10.635160432960484)
Split 18 samples: V36 >= 1903 (purity -6.18265418937591)
Split 9 samples: V72 >= 2039 (purity -2.5020121176909393)
 test size = (1, 1, 54, 103)
 Purity threshold 1.0
  acc: 68.52% kappa: 64.58% 9×9 Array{Int64,2}:
 4  0  0  0  0  0  2  0  0
 0  2  1  1  0  2  0  0  0
 0  1  2  0  0  0  0  3  0
 0  2  0  4  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  2  1  0  2  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  0  0  5  0
 0  0  0  0  0  0  0  0  6
nodes: (51, height: 9)

                                                             
Benchmarking dataset 'IndianPinesCorrectedDataset, 1x1'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations))
 train size = (1, 1, 384, 200)
Split 384 samples: V149 >= 1177 (purity -829.5727382155787)
Split 141 samples: V27 >= 2581 (purity -191.0607447617995)
Split 49 samples: V27 >= 2406 (purity -27.848305937922362)
Split 25 samples: V15 >= 3680 (purity -2.249340578475233)
Split 24 samples: V163 >= 1088 (purity -11.226770478359596)
Split 20 samples: V148 >= 1044 (purity -3.3650583350462817)
Split 92 samples: V37 >= 4879 (purity -91.35741983681518)
Split 25 samples: V3 >= 4106 (purity -2.249340578475233)
Split 67 samples: V186 >= 1087 (purity -52.58271171926312)
Split 43 samples: V94 >= 3038 (purity -31.35519888801376)
Split 33 samples: V34 >= 3608 (purity -14.522233612885595)
Split 9 samples: V33 >= 2965 (purity -4.1588830833596715)
Split 24 samples: V4 >= 4127 (purity -2.772588722239781)
Split 10 samples: V9 >= 4372 (purity -2.249340578475232)
Split 24 samples: V9 >= 4439 (purity -4.1588830833596715)
Split 243 samples: V183 >= 1156 (purity -439.87241548766565)
Split 97 samples: V78 >= 1642 (purity -94.74642573494259)
Split 48 samples: V59 >= 2425 (purity -20.593798447859633)
Split 25 samples: V1 >= 3674 (purity -2.703367253197828)
Split 23 samples: V2 >= 4238 (purity -2.249340578475233)
Split 49 samples: V8 >= 4710 (purity -24.999292198528735)
Split 23 samples: V27 >= 2671 (purity -2.249340578475233)
Split 26 samples: V4 >= 4120 (purity -8.951334720158487)
Split 22 samples: V77 >= 1852 (purity -2.772588722239781)
Split 146 samples: V80 >= 1823 (purity -258.8377677891425)
Split 102 samples: V142 >= 1284 (purity -166.0927965272505)
Split 24 samples: V33 >= 3232 (purity -27.313171198260026)
Split 11 samples: V26 >= 3273 (purity -8.57043770593505)
Split 13 samples: V151 >= 1088 (purity -2.5020121176909393)
Split 78 samples: V183 >= 1204 (purity -108.83325847266708)
Split 23 samples: V89 >= 3185 (purity -12.226005059546743)
Split 17 samples: V6 >= 4865 (purity -2.772588722239781)
Split 55 samples: V113 >= 1933 (purity -70.19814476529717)
Split 26 samples: V39 >= 5064 (purity -17.469699892759927)
Split 9 samples: V3 >= 4422 (purity -4.1588830833596715)
Split 17 samples: V42 >= 5641 (purity -4.1588830833596715)
Split 29 samples: V6 >= 5233 (purity -30.525578011394302)
Split 18 samples: V158 >= 1332 (purity -11.475160094639762)
Split 12 samples: V1 >= 2780 (purity -2.772588722239781)
Split 11 samples: V103 >= 1095 (purity -5.120154806494096)
Split 44 samples: V154 >= 1405 (purity -62.44375965552747)
Split 14 samples: V107 >= 1133 (purity -9.162907318741555)
Split 10 samples: V103 >= 1110 (purity -2.77258872223978)
Split 30 samples: V44 >= 6298 (purity -35.0343865846502)
Split 26 samples: V23 >= 5163 (purity -25.790313928116227)
Split 9 samples: V88 >= 2714 (purity -4.7513526961661725)
Split 17 samples: V2 >= 4635 (purity -9.740082368457681)
Split 13 samples: V81 >= 2438 (purity -2.772588722239781)
  21.777 s (87004105 allocations: 4.65 GiB)
 test size = (1, 1, 96, 200)
 Purity threshold 1.0
  acc: 64.58% kappa: 62.22% 16×16 Array{Int64,2}:
 5  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
 0  3  0  0  0  0  0  0  0  1  2  0  0  0  0  0
 0  0  1  1  0  0  0  0  0  1  2  0  0  0  0  1
 0  1  0  5  0  0  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  4  0  0  0  1  0  0  0  0  1  0  0
 0  0  0  1  0  5  0  0  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  5  1  0  0  0  0  0  0  0  0
 0  0  0  0  0  0  2  4  0  0  0  0  0  0  0  0
 0  0  0  0  0  1  0  0  4  0  0  0  0  0  1  0
 0  2  0  0  0  0  0  0  0  2  1  1  0  0  0  0
 0  1  0  2  0  0  0  0  0  0  3  0  0  0  0  0
 0  1  0  1  0  0  0  0  0  1  2  1  0  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  6  0  0
 0  0  0  0  0  2  0  0  1  0  0  0  0  1  2  0
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  6
nodes: (97, height: 9)



julia-1.5.3:

Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations), test_operators = DecisionTree.ModalLogic.TestOperator[DecisionTree.ModalLogic._TestOpGeq(), DecisionTree.ModalLogic._TestOpLes()])
 train size = (3, 3, 216, 103)
Computing Sogliole...
Split 216 samples: <EC> (V9 >= 1073) (purity -351.00235084038457)                              
Split 89 samples: <NTPPi> (V64 >= 315) (purity -71.26906304754931)                             
Split 47 samples: V69 >= 325 (purity -1.021405182655144e-14)                                   
Split 42 samples: V72 >= 1505 (purity -29.694820009090684)                                     
Split 13 samples: <TPP> (V72 >= 1442) (purity -2.772588722239781)                              
Split 29 samples: <TPP> (V27 >= 1259) (purity -9.386075711038778)                              
Split 24 samples: <NTPP> (V100 >= 2418) (purity -2.772588722239781)                            
Split 127 samples: <TPPi> (V99 >= 1693) (purity -159.25321618944832)                           
Split 45 samples: <TPPi> (V19 >= 1304) (purity -25.017378478857044)                            
Split 13 samples: <TPPi> (V35 >= 1360) (purity -2.249340578475233)                             
Split 32 samples: <TPP> (V29 >= 1531) (purity -3.1394888625873)                                
Split 9 samples: V1 >= 1409 (purity -2.249340578475233)                                        
Split 82 samples: <DC> (V1 >= 2700) (purity -69.97723285064416)                                
Split 58 samples: <TPP> (V77 >= 2446) (purity -44.57791224234647)                              
Split 47 samples: <TPPi> (V9 >= 1341) (purity -25.937021688015413)                             
Split 26 samples: <DC> (V2 >= 1288) (purity -10.6722990086007)
Split 22 samples: <DC> (V6 >= 1325) (purity -6.634653515415064)
Split 18 samples: V1 >= 1710 (purity -2.249340578475233)
Split 21 samples: <EC> (V28 >= 1988) (purity -2.772588722239781)
Split 11 samples: <PO> (V1 >= 1072) (purity -2.772588722239781)
Decision Tree
Leaves: 21
Tot nodes: 41
Height: 8
Modal height:  7
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<EC> (V9 >= 1073)
✔ <TPPi> (V99 >= 1693)
│✔ <DC> (V1 >= 2700)
││✔ 5 : 24/24
││✘ <TPP> (V77 >= 2446)
││ ✔ <PO> (V1 >= 1072)
││ │✔ 6 : 7/7
││ │✘ 6 : 2/4
││ ✘ <TPPi> (V9 >= 1341)
││  ✔ <EC> (V28 >= 1988)
││  │✔ 3 : 2/4
││  │✘ 8 : 17/17
││  ✘ <DC> (V2 >= 1288)
││   ✔ <DC> (V6 >= 1325)
││   │✔ V1 >= 1710
││   ││✔ 3 : 3/4
││   ││✘ 3 : 14/14
││   │✘ 3 : 2/4
││   ✘ 8 : 4/4
│✘ <TPPi> (V19 >= 1304)
│ ✔ <TPP> (V29 >= 1531)
│ │✔ V1 >= 1409
│ ││✔ 1 : 3/4
│ ││✘ 1 : 5/5
│ │✘ 7 : 23/23
│ ✘ <TPPi> (V35 >= 1360)
│  ✔ 3 : 3/4
│  ✘ 1 : 9/9
✘ <NTPPi> (V64 >= 315)
 ✔ V72 >= 1505
 │✔ <TPP> (V27 >= 1259)
 ││✔ 6 : 4/5
 ││✘ <NTPP> (V100 >= 2418)
 ││ ✔ 2 : 20/20
 ││ ✘ 2 : 2/4
 │✘ <TPP> (V72 >= 1442)
 │ ✔ 6 : 9/9
 │ ✘ 2 : 2/4
 ✘ V69 >= 325
  ✔ 4 : 23/23
  ✘ 9 : 24/24
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 74.07% kappa: 70.83% 9×9 Array{Int64,2}:
 4  1  0  0  0  1  0  0  0
 0  1  0  2  0  3  0  0  0
 1  0  3  0  0  1  0  1  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  0  0  0  0  6  0  0  0
 1  0  0  0  0  0  5  0  0
 0  0  1  0  0  1  0  4  0
 1  0  0  0  0  0  0  0  5
nodes: (41, height: 8)
Decision Tree
Leaves: 21
Tot nodes: 41
Height: 8
Modal height:  7
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<EC> (V9 >= 1073)
✔ <TPPi> (V99 >= 1693)
│✔ <DC> (V1 >= 2700)
││✔ 5 : 24/24
││✘ <TPP> (V77 >= 2446)
││ ✔ <PO> (V1 >= 1072)
││ │✔ 6 : 7/7
││ │✘ 6 : 2/4
││ ✘ <TPPi> (V9 >= 1341)
││  ✔ <EC> (V28 >= 1988)
││  │✔ 3 : 2/4
││  │✘ 8 : 17/17
││  ✘ <DC> (V2 >= 1288)
││   ✔ <DC> (V6 >= 1325)
││   │✔ V1 >= 1710
││   ││✔ 3 : 3/4
││   ││✘ 3 : 14/14
││   │✘ 3 : 2/4
││   ✘ 8 : 4/4
│✘ <TPPi> (V19 >= 1304)
│ ✔ <TPP> (V29 >= 1531)
│ │✔ V1 >= 1409
│ ││✔ 1 : 3/4
│ ││✘ 1 : 5/5
│ │✘ 7 : 23/23
│ ✘ <TPPi> (V35 >= 1360)
│  ✔ 3 : 3/4
│  ✘ 1 : 9/9
✘ <NTPPi> (V64 >= 315)
 ✔ V72 >= 1505
 │✔ <TPP> (V27 >= 1259)
 ││✔ 6 : 4/5
 ││✘ <NTPP> (V100 >= 2418)
 ││ ✔ 2 : 20/20
 ││ ✘ 2 : 2/4
 │✘ <TPP> (V72 >= 1442)
 │ ✔ 6 : 9/9
 │ ✘ 2 : 2/4
 ✘ V69 >= 325
  ✔ 4 : 23/23
  ✘ 9 : 24/24


T = testDataset(datasets[3], false, args=args, kwargs=kwargs);                                                                                 
Benchmarking dataset 'PaviaDataset, 3x3'...                                                                                                           
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)                                                                                  
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations), test_operators = Decis
ionTree.ModalLogic.TestOperator[DecisionTree.ModalLogic._TestOpGeq()])                                                                                
 train size = (3, 3, 216, 103)
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/compute-thresholds.jl:92
┌ LogLevel(-500):  Branch (216 samples) on condition: <> (V9 >= 1073), purity -1.625010883520299
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (89 samples) on condition: <NTPPi> (V64 >= 315), purity -0.8007759892983068
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (47 samples) on condition: V69 >= 325, purity -2.1732025162875404e-16
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (42 samples) on condition: V72 >= 1505, purity -0.7070195240259687
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (13 samples) on condition: <> (V72 >= 1442), purity -0.21327605555690624
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (29 samples) on condition: <> (V27 >= 1259), purity -0.3236577831392682
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (24 samples) on condition: <NTPP> (V100 >= 2418), purity -0.11552453009332421
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (127 samples) on condition: <TPPi> (V99 >= 1693), purity -1.2539623322003806
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (45 samples) on condition: <TPPi> (V19 >= 1304), purity -0.5559417439746009
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (13 samples) on condition: <TPPi> (V35 >= 1360), purity -0.1730261983442487
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (32 samples) on condition: <> (V49 >= 1707), purity -0.0
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (82 samples) on condition: <> (V1 >= 2700), purity -0.8533808884224897
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (58 samples) on condition: <> (V77 >= 2446), purity -0.7685846938335599
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (47 samples) on condition: <TPPi> (V9 >= 1341), purity -0.5518515252769237
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (26 samples) on condition: <> (V2 >= 1288), purity -0.4104730387923346
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (22 samples) on condition: <DC> (V5 >= 1311), purity -0.3015751597915938
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (18 samples) on condition: V1 >= 1710, purity -0.12496336547084629
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (21 samples) on condition: <> (V28 >= 1988), purity -0.13202803439237054
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
┌ LogLevel(-500):  Branch (11 samples) on condition: <> (V1 >= 1628), purity -0.2520535202036165
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:339
Decision Tree
Leaves: 20
Tot nodes: 39
Height: 8
Modal height:  7
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<> (V9 >= 1073)
✔ <TPPi> (V99 >= 1693)
│✔ <> (V1 >= 2700)
││✔ 5 : 24/24
││✘ <> (V77 >= 2446)
││ ✔ <> (V1 >= 1628)
││ │✔ 6 : 2/4
││ │✘ 6 : 7/7
││ ✘ <TPPi> (V9 >= 1341)
││  ✔ <> (V28 >= 1988)
││  │✔ 3 : 2/4
││  │✘ 8 : 17/17
││  ✘ <> (V2 >= 1288)
││   ✔ <DC> (V5 >= 1311)
││   │✔ V1 >= 1710
││   ││✔ 3 : 3/4
││   ││✘ 3 : 14/14
││   │✘ 3 : 2/4
││   ✘ 8 : 4/4
│✘ <TPPi> (V19 >= 1304)
│ ✔ <> (V49 >= 1707)
│ │✔ 1 : 8/8
│ │✘ 7 : 24/24
│ ✘ <TPPi> (V35 >= 1360)
│  ✔ 3 : 3/4
│  ✘ 1 : 9/9
✘ <NTPPi> (V64 >= 315)
 ✔ V72 >= 1505
 │✔ <> (V27 >= 1259)
 ││✔ 6 : 4/5
 ││✘ <NTPP> (V100 >= 2418)
 ││ ✔ 2 : 20/20
 ││ ✘ 2 : 2/4
 │✘ <> (V72 >= 1442)
 │ ✔ 6 : 9/9
 │ ✘ 2 : 2/4
 ✘ V69 >= 325
  ✔ 4 : 23/23
  ✘ 9 : 24/24
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 75.93% kappa: 72.92% 9×9 Array{Int64,2}:
 4  1  0  0  0  1  0  0  0
 0  1  0  2  0  3  0  0  0
 1  0  3  0  0  1  0  1  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  1  0  4  0
 0  0  0  0  0  0  1  0  5
nodes: (39, height: 8)

julia> T = testDataset(datasets[3], false, args=args, kwargs=kwargs
Benchmarking dataset 'PaviaDataset, 3x
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations), test_operators = DecisionTree.ModalLogic.TestOperator[DecisionTree.ModalLogic._TestOpGeq(), DecisionTree.ModalLogic._TestOpLes
 train size = (3, 3, 216, 103)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
┌ LogLevel(-500):  Branch (216 samples) on condition: <> (V9 >= 1073), purity -1.625010883520299
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (89 samples) on condition: <NTPPi> (V64 >= 315), purity -0.8007759892983068
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (47 samples) on condition: V69 >= 325, purity -2.1732025162875404e-16
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (42 samples) on condition: V72 >= 1505, purity -0.7070195240259687
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (13 samples) on condition: <> (V72 >= 1442), purity -0.21327605555690624
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (29 samples) on condition: <> (V27 >= 1259), purity -0.3236577831392682
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (24 samples) on condition: <NTPP> (V100 >= 2418), purity -0.11552453009332421
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (127 samples) on condition: <TPPi> (V99 >= 1693), purity -1.2539623322003806
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (45 samples) on condition: <TPPi> (V19 >= 1304), purity -0.5559417439746009
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (13 samples) on condition: <TPPi> (V35 >= 1360), purity -0.1730261983442487
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (32 samples) on condition: <> (V49 >= 1707), purity -0.0
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (82 samples) on condition: <> (V1 >= 2700), purity -0.8533808884224897
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (58 samples) on condition: <> (V77 >= 2446), purity -0.7685846938335599
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (47 samples) on condition: <TPPi> (V9 >= 1341), purity -0.5518515252769237
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (26 samples) on condition: <> (V2 >= 1288), purity -0.4104730387923346
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (22 samples) on condition: <DC> (V5 >= 1311), purity -0.3015751597915938
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (18 samples) on condition: V1 >= 1710, purity -0.12496336547084629
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (21 samples) on condition: <> (V28 >= 1988), purity -0.13202803439237054
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
┌ LogLevel(-500):  Branch (11 samples) on condition: <> (V1 >= 1628), purity -0.2520535202036165
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:340
Decision Tree
Leaves: 20
Tot nodes: 39
Height: 8
Modal height:  7
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<> (V9 >= 1073)
✔ <TPPi> (V99 >= 1693)
│✔ <> (V1 >= 2700)
││✔ 5 : 24/24
││✘ <> (V77 >= 2446)
││ ✔ <> (V1 >= 1628)
││ │✔ 6 : 2/4
││ │✘ 6 : 7/7
││ ✘ <TPPi> (V9 >= 1341)
││  ✔ <> (V28 >= 1988)
││  │✔ 3 : 2/4
││  │✘ 8 : 17/17
││  ✘ <> (V2 >= 1288)
││   ✔ <DC> (V5 >= 1311)
││   │✔ V1 >= 1710
││   ││✔ 3 : 3/4
││   ││✘ 3 : 14/14
││   │✘ 3 : 2/4
││   ✘ 8 : 4/4
│✘ <TPPi> (V19 >= 1304)
│ ✔ <> (V49 >= 1707)
│ │✔ 1 : 8/8
│ │✘ 7 : 24/24
│ ✘ <TPPi> (V35 >= 1360)
│  ✔ 3 : 3/4
│  ✘ 1 : 9/9
✘ <NTPPi> (V64 >= 315)
 ✔ V72 >= 1505
 │✔ <> (V27 >= 1259)
 ││✔ 6 : 4/5
 ││✘ <NTPP> (V100 >= 2418)
 ││ ✔ 2 : 20/20
 ││ ✘ 2 : 2/4
 │✘ <> (V72 >= 1442)
 │ ✔ 6 : 9/9
 │ ✘ 2 : 2/4
 ✘ V69 >= 325
  ✔ 4 : 23/23
  ✘ 9 : 24/24
 142.821 s (1524216251 allocations: 73.29 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 75.93% kappa: 72.92% 9×9 Array{Int64,2}:
 4  1  0  0  0  1  0  0  0
 0  1  0  2  0  3  0  0  0
 1  0  3  0  0  1  0  1  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  1  0  0  1  0  4  0
 0  0  0  0  0  0  1  0  5
nodes: (39, height: 8)
Decision Tree
Leaves: 20
Tot nodes: 39
Height: 8
Modal height:  7
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()


Found a problem which was causing the only use of >= and not <

If we allow <> at each node:

Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations), test_operators = DecisionTree.ModalLogic.TestOperator[DecisionTree.ModalLogic._TestOpGeq(), DecisionTree.ModalLogic._TestOpLes()])
 train size = (3, 3, 216, 103)
┌ LogLevel(-500):  Branch (216 samples) on condition: <> (V9 >= 1073), purity -1.625010883520299
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (89 samples) on condition: <> (V64 < 315), purity -0.8007759892983068
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (42 samples) on condition: <> (V72 < 1505), purity -0.7070195240259687
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (29 samples) on condition: <> (V27 >= 1259), purity -0.3236577831392682
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (24 samples) on condition: V100 >= 2418, purity -0.11552453009332421
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (13 samples) on condition: <NTPP> (V1 >= 622), purity -0.21327605555690624
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (47 samples) on condition: V69 >= 433, purity -2.1732025162875404e-16
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (127 samples) on condition: V86 < 1546, purity -1.2238306104652403
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (82 samples) on condition: V1 >= 2700, purity -0.8312025688710774
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (58 samples) on condition: V76 >= 2452, purity -0.7435712386065986
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (49 samples) on condition: <TPPi> (V20 < 1472), purity -0.6409508749121988
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (15 samples) on condition: V23 < 1459, purity -0.18483924814931874
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (34 samples) on condition: V8 >= 1235, purity -0.4382143184111928
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (18 samples) on condition: <> (V1 < 770), purity -0.4243427788632086
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (9 samples) on condition: <TPPi> (V2 < 989), purity -0.46209812037329684
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (45 samples) on condition: <NTPPi> (V3 < 1476), purity -0.3910240713765156
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (25 samples) on condition: V73 < 1366, purity -0.26759596951150955
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
Decision Tree
Leaves: 18
Tot nodes: 35
Height: 8
Modal height:  4
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<> (V9 >= 1073)
✔ V86 < 1546
│✔ <NTPPi> (V3 < 1476)
││✔ 7 : 20/20
││✘ V73 < 1366
││ ✔ 1 : 18/18
││ ✘ 7 : 4/7
│✘ V1 >= 2700
│ ✔ 5 : 24/24
│ ✘ V76 >= 2452
│  ✔ 6 : 9/9
│  ✘ <TPPi> (V20 < 1472)
│   ✔ V8 >= 1235
│   │✔ 3 : 16/16
│   │✘ <> (V1 < 770)
│   │ ✔ <TPPi> (V2 < 989)
│   │ │✔ 8 : 2/4
│   │ │✘ 3 : 5/5
│   │ ✘ 8 : 9/9
│   ✘ V23 < 1459
│    ✔ 8 : 2/4
│    ✘ 8 : 11/11
✘ <> (V64 < 315)
 ✔ V69 >= 433
 │✔ 4 : 23/23
 │✘ 9 : 24/24
 ✘ <> (V72 < 1505)
  ✔ <NTPP> (V1 >= 622)
  │✔ 2 : 2/4
  │✘ 6 : 9/9
  ✘ <> (V27 >= 1259)
   ✔ 6 : 4/5
   ✘ V100 >= 2418
    ✔ 2 : 20/20
    ✘ 2 : 2/4
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 77.78% kappa: 75.0% 9×9 Array{Int64,2}:
 5  1  0  0  0  0  0  0  0
 0  2  0  2  0  2  0  0  0
 0  0  3  0  0  1  0  2  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  0  0  0  0  6  0  0  0
 0  0  0  0  0  0  6  0  0
 0  0  2  0  0  1  0  3  0
 1  0  0  0  0  0  0  0  5
nodes: (35, height: 8)
Decision Tree
Leaves: 18
Tot nodes: 35
Height: 8
Modal height:  4
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<> (V9 >= 1073)
✔ V86 < 1546
│✔ <NTPPi> (V3 < 1476)
││✔ 7 : 20/20
││✘ V73 < 1366
││ ✔ 1 : 18/18
││ ✘ 7 : 4/7
│✘ V1 >= 2700
│ ✔ 5 : 24/24
│ ✘ V76 >= 2452
│  ✔ 6 : 9/9
│  ✘ <TPPi> (V20 < 1472)
│   ✔ V8 >= 1235
│   │✔ 3 : 16/16
│   │✘ <> (V1 < 770)
│   │ ✔ <TPPi> (V2 < 989)
│   │ │✔ 8 : 2/4
│   │ │✘ 3 : 5/5
│   │ ✘ 8 : 9/9
│   ✘ V23 < 1459
│    ✔ 8 : 2/4
│    ✘ 8 : 11/11
✘ <> (V64 < 315)
 ✔ V69 >= 433
 │✔ 4 : 23/23
 │✘ 9 : 24/24
 ✘ <> (V72 < 1505)
  ✔ <NTPP> (V1 >= 622)
  │✔ 2 : 2/4
  │✘ 6 : 9/9
  ✘ <> (V27 >= 1259)
   ✔ 6 : 4/5
   ✘ V100 >= 2418
    ✔ 2 : 20/20
    ✘ 2 : 2/4

Otherwise:

 @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/compute-thresholds.jl:168
┌ LogLevel(-500):  Branch (216 samples) on condition: <EC> (V9 >= 1073), purity -1.625010883520299
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (89 samples) on condition: <EC> (V64 < 315), purity -0.8007759892983068
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (42 samples) on condition: <EC> (V72 < 1505), purity -0.7070195240259687
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (29 samples) on condition: <EC> (V27 >= 1259), purity -0.3236577831392682
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (24 samples) on condition: V100 >= 2418, purity -0.11552453009332421
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (13 samples) on condition: <PO> (V2 >= 708), purity -0.21327605555690624
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (47 samples) on condition: V69 >= 433, purity -2.1732025162875404e-16
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (127 samples) on condition: V86 < 1546, purity -1.2238306104652403
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (82 samples) on condition: V1 >= 2700, purity -0.8312025688710774
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (58 samples) on condition: V76 >= 2452, purity -0.7435712386065986
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (49 samples) on condition: <TPPi> (V20 < 1472), purity -0.6200874939729268
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (16 samples) on condition: V23 < 1459, purity -0.17328679513998632
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (33 samples) on condition: V8 >= 1235, purity -0.4360066395044511
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (17 samples) on condition: <TPP> (V15 >= 1365), purity -0.44930411879633847
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (8 samples) on condition: V1 < 1009, purity -0.34657359027997264
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (9 samples) on condition: V1 < 1026, purity -0.24992673094169257
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (45 samples) on condition: <TPPi> (V81 < 1354), purity -0.41847017146476667
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (30 samples) on condition: <EC> (V3 >= 1341), purity -0.22299664125959165
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
Decision Tree
Leaves: 19
Tot nodes: 37
Height: 8
Modal height:  4
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 70.37% kappa: 66.67% 9×9 Array{Int64,2}:
 5  1  0  0  0  0  0  0  0
 0  2  0  2  0  2  0  0  0
 0  0  3  0  0  1  0  2  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  0  0  0  5  0  0  0
 3  0  0  0  0  0  3  0  0
 0  0  2  0  0  1  0  3  0
 1  0  0  0  0  0  0  0  5
nodes: (37, height: 8)
Decision Tree
Leaves: 19
Tot nodes: 37
Height: 8
Modal height:  4
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<EC> (V9 >= 1073)
✔ V86 < 1546
│✔ <TPPi> (V81 < 1354)
││✔ 1 : 15/15
││✘ <EC> (V3 >= 1341)
││ ✔ 1 : 4/7
││ ✘ 7 : 23/23
│✘ V1 >= 2700
│ ✔ 5 : 24/24
│ ✘ V76 >= 2452
│  ✔ 6 : 9/9
│  ✘ <TPPi> (V20 < 1472)
│   ✔ V8 >= 1235
│   │✔ 3 : 16/16
│   │✘ <TPP> (V15 >= 1365)
│   │ ✔ V1 < 1026
│   │ │✔ 8 : 5/5
│   │ │✘ 8 : 3/4
│   │ ✘ V1 < 1009
│   │  ✔ 3 : 4/4
│   │  ✘ 3 : 2/4
│   ✘ V23 < 1459
│    ✔ 8 : 2/4
│    ✘ 8 : 12/12
✘ <EC> (V64 < 315)
 ✔ V69 >= 433
 │✔ 4 : 23/23
 │✘ 9 : 24/24
 ✘ <EC> (V72 < 1505)
  ✔ <PO> (V2 >= 708)
  │✔ 2 : 2/4
  │✘ 6 : 9/9
  ✘ <EC> (V27 >= 1259)
   ✔ 6 : 4/5
   ✘ V100 >= 2418
    ✔ 2 : 20/20
    ✘ 2 : 2/4



Benchmarking dataset 'PaviaDataset, 3x3'...
args = (max_depth = -1, min_samples_leaf = 4, min_samples_split = 8)
kwargs = (initCondition = DecisionTree._startAtCenter(), ontology = Ontology(DecisionTree.ModalLogic.Interval2D,TopoRelations), test_operators = DecisionTree.ModalLogic.TestOperator[DecisionTree.ModalLogic._TestOpGeq(), DecisionTree.ModalLogic._TestOpLes()])
 train size = (3, 3, 216, 103)
┌ LogLevel(-500):  Branch (216 samples) on condition: <EC> (V9 >= 1073), purity -1.625010883520299
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (89 samples) on condition: <EC> (V64 < 315), purity -0.8007759892983068
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (42 samples) on condition: <EC> (V72 < 1505), purity -0.7070195240259687
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (29 samples) on condition: <EC> (V27 >= 1259), purity -0.3236577831392682
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (24 samples) on condition: V100 >= 2418, purity -0.11552453009332421
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (13 samples) on condition: <PO> (V2 >= 708), purity -0.21327605555690624
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (47 samples) on condition: V69 >= 433, purity -2.1732025162875404e-16
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (127 samples) on condition: <DC> (V96 < 1529), purity -1.2238306104652403
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (82 samples) on condition: V1 >= 2700, purity -0.8312025688710774
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (58 samples) on condition: V76 >= 2452, purity -0.7435712386065986
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (49 samples) on condition: <TPPi> (V20 < 1472), purity -0.6200874939729268
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (16 samples) on condition: <TPP> (V23 < 1459), purity -0.17328679513998632
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (33 samples) on condition: V8 >= 1235, purity -0.4360066395044511
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (17 samples) on condition: <TPP> (V15 >= 1365), purity -0.44930411879633847
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (8 samples) on condition: <EC> (V1 < 770), purity -0.34657359027997264
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (9 samples) on condition: V1 >= 1345, purity -0.24992673094169257
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (45 samples) on condition: <TPPi> (V81 < 1354), purity -0.41847017146476667
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (30 samples) on condition: <TPP> (V18 >= 1340), purity -0.252122067613353
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
┌ LogLevel(-500):  Branch (25 samples) on condition: V1 >= 1496, purity -0.08997362313900932
└ @ DecisionTree.treeclassifier ~/.julia/dev/DecisionTree/src/modal-classification/tree.jl:341
Decision Tree
Leaves: 20
Tot nodes: 39
Height: 8
Modal height:  5
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
<EC> (V9 >= 1073)
✔ <DC> (V96 < 1529)
│✔ <TPPi> (V81 < 1354)
││✔ 1 : 15/15
││✘ <TPP> (V18 >= 1340)
││ ✔ V1 >= 1496
││ │✔ 7 : 3/4
││ │✘ 7 : 21/21
││ ✘ 1 : 3/5
│✘ V1 >= 2700
│ ✔ 5 : 24/24
│ ✘ V76 >= 2452
│  ✔ 6 : 9/9
│  ✘ <TPPi> (V20 < 1472)
│   ✔ V8 >= 1235
│   │✔ 3 : 16/16
│   │✘ <TPP> (V15 >= 1365)
│   │ ✔ V1 >= 1345
│   │ │✔ 8 : 3/4
│   │ │✘ 8 : 5/5
│   │ ✘ <EC> (V1 < 770)
│   │  ✔ 3 : 4/4
│   │  ✘ 3 : 2/4
│   ✘ <TPP> (V23 < 1459)
│    ✔ 8 : 2/4
│    ✘ 8 : 12/12
✘ <EC> (V64 < 315)
 ✔ V69 >= 433
 │✔ 4 : 23/23
 │✘ 9 : 24/24
 ✘ <EC> (V72 < 1505)
  ✔ <PO> (V2 >= 708)
  │✔ 2 : 2/4
  │✘ 6 : 9/9
  ✘ <EC> (V27 >= 1259)
   ✔ 6 : 4/5
   ✘ V100 >= 2418
    ✔ 2 : 20/20
    ✘ 2 : 2/4
 143.443 s (1616260691 allocations: 77.54 GiB)
 test size = (3, 3, 54, 103)
 Purity threshold 1.0
  acc: 72.22% kappa: 68.75% 9×9 Array{Int64,2}:
 4  1  0  0  0  0  1  0  0
 0  2  0  2  0  2  0  0  0
 0  0  3  0  0  1  0  2  0
 0  0  0  6  0  0  0  0  0
 0  0  0  0  6  0  0  0  0
 0  1  0  0  0  5  0  0  0
 1  0  0  0  0  0  5  0  0
 0  0  2  0  0  1  0  3  0
 1  0  0  0  0  0  0  0  5
nodes: (39, height: 8)
Decision Tree
Leaves: 20
Tot nodes: 39
Height: 8
Modal height:  5
worldType: DecisionTree.ModalLogic.Interval2D
initCondition: DecisionTree._startAtCenter()
