☐	check that missing is not in X or Y
☐	Write optimized ArrayOfOnes struct for W. Someone did this already and it looks ok: https://github.com/emmt/StructuredArrays.jl . Also try: https://github.com/JuliaArrays/FillArrays.jl https://juliaarrays.github.io/ArraysOfArrays.jl/stable/ https://github.com/JuliaArrays/BlockArrays.jl
☐	Support for dataframes, as opposed to MatricialDatasets (this allows instances of different size. Is there a way of supporting instances of different size using nothing or missing? Maybe there is an implementation of multi-dimensional array where one can specify that along one axis subArrays have non-uniform size?!)
☐	clean ModalLogic.jl
☐	Fix naming style (e.g. variables, etc. Order of struct's members)
☐	timeit -> symbol
☐	dataset-loading functions should tell about how they balanced, and how they randomized
☐	Check whether \@propagate_inbounds, \@inbounds improves performances https://github.com/JuliaLang/julia/issues/39340
☐	Add comments
☐	Clean initCondition and worldType code
☐	Custom pretty printing, instead of display_... See https://docs.julialang.org/en/v1/manual/types/#man-custom-pretty-printing
☐	Improve type stability for better time performance: e.g. type-stable slicing with JuliennedArrays ( from https://discourse.julialang.org/t/way-to-slice-an-array-of-unknown-number-of-dimensions/27246 ), EllipsisNotation https://github.com/ChrisRackauckas/EllipsisNotation.jl. Use \@code_warntype as in https://discourse.julialang.org/t/why-selectdim-is-type-instable/25271/2 to double check each function

☐	Maybe make gammas be an array-like structure with different indexing style (e.g. relations taken from a list, IndexStyle...). This makes the indexing safer

☐	Refactor and distinguish between testoperators and functions; and opt/aggregator/polarity
☐	computation of softened operators takes too much time (optimize at least <A> in the temporal case?)
☐	rename gammas (into thresholds?)
☐	Add the generalized solution for union of relations: _UnionOfRelations and its WExtremaModal, WExtrema, WExtremeModal, WExtreme, enumAcc, enumAccRepr. _UnionOfRelations{typeof((RelationId,))} _UnionOfRelations{typeof((RelationId,))} Tuple{_RelationId} (so you can rewrite RCC5 from RCC8 relations and RCC8 from IA, maybe it's cleaner in some cases?)
☐	Check that gammasId can't be optimized any further
☐	Add tree parser
☐	Add convenience methods for tree editing.
☐	Different array implementations? Array with named dimensions? staticArrays for small domains (matrices/vectors) https://github.com/JuliaArrays/StaticArrays.jl Etc.

☐	Add the use of an unbalanced test set, and allow ConfusionMatrix to compute the overall accuracy in a balanced way.
☐	Add IA7 relations: Complete by writing enumAccBare, enumAcc, enumAccRepr.
☐	Find out whether it's faster to use gammasId or recalculate them. (If gammasId is better, use it in WExtrema?)
☐	Add IA7^2 relations.

☐	Parallelize tree construction? Does this require manual copy of dynamic structures used in _split! ?
☐	Optimize RCC5
☐	Add IA3, IA3^7 relations
☐	Parametrize worldTypes forcing things such as minimum size?

☐	Generalize sampling of the feature subset (e.g. providing a function vars_sampling_distr(n_vars, rng) = 1:n_vars vars_sampling_distr(n_vars, rng) = round(Int, Statistics.gaussrand_(rng, mean=sqrt(n_vars), var=1)))
☐ Half-an-idea: variables are just another dimension without order
☐	An ontology interpreted over an N-dimensional domain gives rise to a Kripke model/frame, but one can *generalize for a Kripke model/frame in graph form*.
	abstract type AbstractKripkeFrame end
	Generic Kripke frame: worlds & relations
	struct KripkeFrame{T} <: AbstractKripkeFrame{T}
☐	Methodically check the consistency of thresholds lookup table with the actual computed values; not only for the best split (it's suspicious how many relations are always discarted)
☐	Interpolate impurity function and find best threshold by interpolation
☐	Add point-based ontology, and test point-based + rectangle algebra?
☐	Generalize World as a tuple of parameters ( https://stackoverflow.com/questions/40160120/generic-constructors-for-subtypes-of-an-abstract-type )
☐	Maybe add new hard operator valuesbetween(a,b) (doesn't make the tree more expressive, just maybe faster at capturing patterns)
☐	Try adding ProgressMeter? https://github.com/timholy/ProgressMeter.jl
☐	Generalize greedy step to greedy-n step.
☐	Generalize to beam-search and then beam-search-n?
☐	Extend to categorical variables


＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
	✔	Calculate per-class accuracy. @done (21-03-12 17:10)
	✔	Create a dataset with many but tiny worlds. Even a completely random one. @done (21-03-12 14:07)
	✔	> doubles the time but doesn't seem to improve performances. Is this a bug? Try to come up with a dataset that shows if it works. If it's not a bug, maybe we should consider parametrizing on whether this is to be used or not. @done (21-03-12 14:07)
	✔	Rename TestOpLes to TestOpLeq @done (21-03-12 14:05)
	✔	Fix compute-threshold and enumAccRepr so that it works with soft test operator as well! @done (21-03-12 14:03)
	✔	Figure out why we reach "Uninformative split." when using Les only @done (21-03-10 17:21)
	✔	Test 5x5 @done (21-03-08 00:59)
	✔	Now move the extremes computation to the outer algorithm scope, so that it happens BEFORE the whole computation. @done (21-03-08 00:59)
	✔	Improve the computation of the extremes leveraging the structure of IA Frames. @done (21-03-08 00:59)
	✔	Soften > and <= to be >alpha and <=alpha. Make alpha an array to iterate over. Find an efficient way to compute it (note that with a few elements in the world, it can be made efficient with integer operations). @done (21-03-08 00:58)
	✔	enumAcc to only use channel_size and not the whole channel @done (21-03-07 16:44)
	✔	Optimize/fix topological enumerators. There may be some errors as well with interval relations (think of the TPPi thingy, that maybe happens elsewhere) @done (21-02-10 17:41)
	✔	Fix the new optimization thingy. It fails, maybe need to swap min/max. @done (21-02-05 18:06)
	✔	Parametrize on the test operators @done (21-02-02 17:52)
	✔	Test topological manually @done (21-02-02 14:57)
	✔	Fix print_world @done (21-02-02 14:07)
	✔	Check the speedup with/without inbounds (3x3 and 5x5 cases) @done (21-02-02 13:56)
	✔	verify new code. (test all datasets (avoid dataset[2] flattened)) @done (21-01-26 18:06)
	✔	Test with no initCondition @done (21-01-26 18:06)
	✔	Try different starting condition: start at the central pixel. @done (21-01-25 00:10)
	✔	Note that we need to know the speedup for using the extremes array. Hide computation of the extremes. @done (21-01-24 14:32)
	✔	Bring back the extremes, noting that this leads to constant propositional check. @done (21-01-24 14:32)
	✔	Add > @done (21-01-23 01:19)
	✔	Calculate confusion matrix @done (21-01-22 20:09)
	✔	Try the two-dimensional case! @done (21-01-21 01:12)
	✔	Use view instead of slicing @done (21-01-18 20:47)
	✔ perhaps the domain should not be 20x3x3 but 3x3x20, because Julia is column-first @done (21-01-15 14:55)
	✔	TODO const MatricialDomain{T,N} = AbstractArray{T,N} end @done (21-01-15 14:55)
	✔	Extend to >=alpha and <alpha; these operators are ordered, closed/not closed; maybe others are categorical, in general some are. Fix </>= thing. Fix is_closed/polarity @done (21-03-15 10:55)
	✔	Fix 3 pre-pruning stop conditions: a) purity>purity_threshold; b) min_sample_{leaf,split}>=threshold{absolute,relative}; c) purity gain < min_purity_gain. What if purity is just card(max_class)/card(all classes)? Why (best_purity / nt)? If ... maybe min_purity_increase needs to become min_info_gain @done (21-03-14 23:03)
	✔	Create RCC5 ontology by joining n/tpp(i) into pp(i) (proper part) and dc/ec into dr (disjointness). @done (21-03-15 11:58)
	✔	Add Error catching+repeat with different log level, and keep going @done (21-03-15 11:58)
	✔	Add name of the labels to a dataset and confusion matrix. @done (21-03-15 12:14)
	✔	Fix purity=-entropy and losses @done (21-03-15 14:55)
	✔	Play with parameters: @done (21-04-03 20:04)
		- relation set: [RCC8, RCC5]
		- Two datasets: [PaviaU, Indian Pines]
		- useRelationAll: 0 # [0, 1]
		- initCondition: startAtCenter # Prossimamente: [startAtCenter, startWithRelationAll]
		- window size: [1x1, 3x3, 5x5, 3x3 flattened, 5x5 flattened]
		- test operators fixed: [(<=,>=,and _6,_7,_8,_9)]
		Fix these;
		- loss = [entropy]
		- min_samples_leaf = [2, 4, 6]
		- min_purity_increase = [0.001, 0.005, 0.01, 0.05, 0.15, 0.25, 0.5]
		- max_purity_leaf = [0.15, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0]
	✔	Preliminary scan on logic-agnostic parameters @done (21-03-19 15:05)
